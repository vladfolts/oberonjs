MODULE ContextExpression;
IMPORT 
    Chars, CodeGenerator, ConstValue, ContextHierarchy, 
    Designator, Errors, Expression, ExpressionTree, 
    Scope, String, Types, Format, Message;
TYPE
    ExpressionHandler* = RECORD(ContextHierarchy.Node)
        PROCEDURE handleExpression*(e: Expression.PType);
    END;
    PExpressionHandler* = POINTER TO ExpressionHandler;

    SimpleExpression* = RECORD(ContextHierarchy.Node)
        PROCEDURE SimpleExpression*(parent: ContextHierarchy.PNode); 
        PROCEDURE handleOperator*(op: STRING);

        list: ExpressionTree.PSimpleList;
    END;
    PSimpleExpression = POINTER TO SimpleExpression;

    ExpressionNode* = RECORD(ContextHierarchy.Node)
        PROCEDURE ExpressionNode*(parent: PExpressionHandler; node: ExpressionTree.PNode);

        node-: ExpressionTree.PNode;
    END;
    PExpressionNode = POINTER TO ExpressionNode;

    PFactor = POINTER TO Factor;

    Factor* = RECORD(ExpressionHandler)
        PROCEDURE Factor*(parent: ContextHierarchy.PNode);

        factor-: ExpressionTree.PFactor;
    END;

    Term* = RECORD(ContextHierarchy.Node)
        PROCEDURE Term*(parent: ContextHierarchy.PNode); 

        list-: ExpressionTree.PTermList;
    END;
    PTerm = POINTER TO Term;

    MulOperator* = RECORD(ContextHierarchy.Node)
    END;

    AddOperator* = RECORD(ContextHierarchy.Node)
    END;

    Const = RECORD(ContextHierarchy.Node)
    END;

    Integer* = RECORD(Const)
        PROCEDURE handleInt*(n: INTEGER);
    END;

    Real* = RECORD(Const)
        PROCEDURE handleReal*(r: REAL);
    END;

    Str* = RECORD(Const)
        PROCEDURE handleStr*(s: STRING);
    END;

    PSet = POINTER TO Set;

    SetElement* = RECORD(ExpressionHandler)
        PROCEDURE SetElement*(parent: PSet);

        from, to: STRING;
        fromValue, toValue: ConstValue.PInt;
        code: CodeGenerator.PIGenerator;
    END;

    Set* = RECORD(ContextHierarchy.Node)
        PROCEDURE handleElement(s: SetElement);

        value: SET;
        expression: STRING;
    END;

VAR
    globalOps: ExpressionTree.POps;

PROCEDURE ExpressionNode.ExpressionNode(parent: PExpressionHandler; node: ExpressionTree.PNode)
    | SUPER(parent),
      node(node);
BEGIN
    IF SELF.node = NIL THEN
        SELF.node := NEW ExpressionTree.Node(globalOps);
    END;
END;

PROCEDURE ExpressionNode.handleLiteral(s: STRING);
BEGIN
    SELF.node.addOp(s);
END;

PROCEDURE ExpressionNode.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN CodeGenerator.nullGenerator;
END;

PROCEDURE ExpressionNode.endParse(): BOOLEAN;
BEGIN
    expression <- SELF.node.asExpression(SELF(POINTER));

    parent <- SELF.parent()(PExpressionHandler);
    parent.codeGenerator().write(expression.code());
    parent.handleExpression(expression);
    RETURN TRUE;
END;

PROCEDURE SimpleExpression.SimpleExpression(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      list(parent(PExpressionNode).node.makeSimple());
END; 

PROCEDURE SimpleExpression.handleLiteral(s: STRING);
BEGIN
    SELF.list.unaryOp := s;
END;

PROCEDURE SimpleExpression.handleOperator(op: STRING);
BEGIN
    SELF.list.addOp(op);
END;

PROCEDURE SimpleExpression.endParse(): BOOLEAN;
BEGIN
    SELF.parent()^(ExpressionNode).node.addSimple(SELF.list);
    RETURN TRUE;
END;

PROCEDURE expressionFromConst(type: Types.PType; value: ConstValue.PType; code: STRING): Expression.PType;
    RETURN Expression.make(code, type, NIL, value);
END;

PROCEDURE Factor.Factor(parent: ContextHierarchy.PNode)
    | SUPER(parent);
BEGIN
    IF parent^ IS Factor THEN
        SELF.factor := parent.factor;
    ELSE
        SELF.factor := parent^(Term).list.makeFactor();
    END;
END; 

PROCEDURE Factor.handleLiteral(s: STRING);
BEGIN
    IF s = "NIL" THEN
        SELF.handleExpression(expressionFromConst(Types.nil, NIL, "null"));
    ELSIF s = "TRUE" THEN
        SELF.handleExpression(expressionFromConst(Types.basic.bool, NEW ConstValue.Int(1), "true"));
    ELSIF s = "FALSE" THEN
        SELF.handleExpression(expressionFromConst(Types.basic.bool, NEW ConstValue.Int(0), "false"));
    ELSIF s = "~" THEN
        SELF.factor.logicalNot();
    END;
END;

PROCEDURE Factor.handleExpression(e: Expression.PType);
BEGIN
    SELF.factor.expression := e;
END;

PROCEDURE Factor.endParse(): BOOLEAN;
VAR
    const: ConstValue.PType;
BEGIN
    IF SELF.factor.expression = NIL THEN
        d <- SELF.attributes.designator;
        info <- d.info();
        IF info IS Types.PConst THEN
            const := info.value;
        END;
        SELF.factor.expression := Expression.make(d.code(), d.type(), d.info(), const);
    END;

    parent <- SELF.parent();
    IF parent^ IS Term THEN
        parent.list.addFactor(SELF.factor);
    END;
    RETURN TRUE;
END;

PROCEDURE Term.Term(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      list(parent(PSimpleExpression).list.makeTerm());
END; 

PROCEDURE Term.endParse(): BOOLEAN;
BEGIN
    SELF.parent()(PSimpleExpression).list.addTerm(SELF.list);
    RETURN TRUE;
END;

PROCEDURE MulOperator.handleLiteral(s: STRING);
BEGIN
    SELF.parent()^(Term).list.addOp(s);
END;

PROCEDURE AddOperator.handleLiteral(s: STRING);
BEGIN
    parent <- SELF.parent()(PSimpleExpression);
    parent.handleOperator(s);
END;

PROCEDURE Integer.handleInt(n: INTEGER);
BEGIN
    SELF.parent()^(ExpressionHandler).handleExpression(expressionFromConst(
        Types.basic.integer, 
        NEW ConstValue.Int(n), 
        String.fromInt(n)));
END;

PROCEDURE Real.handleReal(r: REAL);
BEGIN
    SELF.parent()^(ExpressionHandler).handleExpression(expressionFromConst(
        Types.basic.real, 
        NEW ConstValue.Real(r), 
        String.fromReal(r)));
END;

PROCEDURE escapeString(s: STRING): STRING;
CONST
    doubleQuote = Chars.doubleQuote;
    ln          = Chars.ln;
    cr          = Chars.cr;
    tab         = Chars.tab;
    backspace   = Chars.backspace;
    feed        = Chars.feed;
    backslash   = Chars.backslash;
VAR
    result: STRING;
BEGIN
    result := doubleQuote;
    from <- 0;
    FOR i <- 0 TO LEN(s) - 1 DO
        escape <- CHR(0);
        CASE s[i] OF
              backslash:    escape := backslash;
            | doubleQuote:  escape := doubleQuote;
            | ln:           escape := "n";
            | cr:           escape := "r";
            | tab:          escape := "t";
            | backspace:    escape := "b";
            | feed:         escape := "f";
        END;

        IF ORD(escape) # 0 THEN
            result := result + String.substr(s, from, i - from) + backslash + String.fromChar(escape);
            from := i + 1; 
        END;
    END;
    RETURN result + String.substr(s, from, LEN(s) - from) + doubleQuote;
END;

PROCEDURE Str.handleStr(s: STRING);
BEGIN
    SELF.parent()^(ExpressionHandler).handleExpression(expressionFromConst(
        NEW Types.String(s), 
        NEW ConstValue.String(s), 
        escapeString(s)));
END;

PROCEDURE SetElement.SetElement(parent: PSet)
    | SUPER(parent),
      code(NEW CodeGenerator.SimpleGenerator());
END;

PROCEDURE SetElement.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN SELF.code;
END;

PROCEDURE SetElement.handleExpression(e: Expression.PType);
BEGIN
    value <- e.constValue()(ConstValue.PInt);
    IF LEN(SELF.from) = 0 THEN
        SELF.from := SELF.code.result();
        SELF.fromValue := value;
        SELF.code := NEW CodeGenerator.SimpleGenerator();
    ELSE
        SELF.to := SELF.code.result();
        SELF.toValue := value;
    END;
END;

PROCEDURE SetElement.endParse(): BOOLEAN;
BEGIN
    SELF.parent()^(Set).handleElement(SELF);
    RETURN TRUE;
END;

PROCEDURE Set.handleElement(s: SetElement);
BEGIN
    IF (s.fromValue # NIL) & ((LEN(s.to) = 0) OR (s.toValue # NIL)) THEN
        IF LEN(s.to) # 0 THEN
            FOR i <- s.fromValue.value TO s.toValue.value DO
                INCL(SELF.value, i);
            END;
        ELSE
            INCL(SELF.value, s.fromValue.value);
        END;
    ELSE
        IF LEN(SELF.expression) # 0 THEN
            SELF.expression := SELF.expression + ", ";
        END;
        IF LEN(s.to) # 0 THEN
            SELF.expression := SELF.expression + "[" + s.from + ", " + s.to + "]";
        ELSE
            SELF.expression := SELF.expression + s.from;
        END;
    END;
END;

PROCEDURE Set.endParse(): BOOLEAN;
BEGIN
    parent <- SELF.parent()(PFactor);
    IF LEN(SELF.expression) = 0 THEN
        parent.handleExpression(expressionFromConst(Types.basic.set, NEW ConstValue.Set(SELF.value), String.fromInt(ORD(SELF.value))));
    ELSE
        code <- SELF.root().language().rtl.makeSet(SELF.expression);
        IF SELF.value # {} THEN
            code := code + " | " + String.fromInt(ORD(SELF.value));
        END;
        e <- Expression.makeSimple(code, Types.basic.set);
        parent.handleExpression(e);
    END;
    RETURN TRUE;
END;

PROCEDURE designatorAsExpression*(d: Designator.PType): Expression.PType;
VAR
    value: ConstValue.PType;
BEGIN
    info <- d.info();

    IF info IS Types.PProcedureId THEN
        IF ~info.canBeReferenced() THEN
            Errors.raise(Format.format1(Message.cantBeReferenced, info.idType()));
        END;
    ELSIF info IS Types.PConst THEN
        value := info.value;
    END;
    RETURN Expression.make(d.code(), d.type(), d.info(), value);
END;

BEGIN
    NEW(globalOps);
END ContextExpression.
