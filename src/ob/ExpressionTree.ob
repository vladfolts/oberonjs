MODULE ExpressionTree;
IMPORT
	Cast, Context, ContextHierarchy,
	JS, Format, Message,
	Errors, Expression, LanguageContext, Operator, Record, String, Types, TypeId;
TYPE
    BinaryOperator* = PROCEDURE(l, r: Expression.PType): Expression.PType;
    BinaryOperatorCx* = PROCEDURE(l, r: Expression.PType; cx: LanguageContext.PType): Expression.PType;

    Ops* = RECORD
        PROCEDURE eq*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE notEq*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE less*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE greater*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE lessEq*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE greaterEq*(type: Types.PType): BinaryOperatorCx;
        PROCEDURE is*(VAR cx: ContextHierarchy.Node): BinaryOperatorCx;
        PROCEDURE in*(left, right: Types.PType; cx: ContextHierarchy.Node): BinaryOperatorCx;
        PROCEDURE plus*(type: Types.PType): BinaryOperator;

        PROCEDURE eqExpect(): STRING;
        PROCEDURE strongRelExpect(): STRING;
        PROCEDURE relExpect(): STRING;
        PROCEDURE plusExpect*(): STRING;

        PROCEDURE coalesceType*(leftType, rightType: Types.PType): Types.PType;
    END;
    POps* = POINTER TO Ops;

    Factor* = RECORD
    	PROCEDURE logicalNot*();

    	not: BOOLEAN;
        expression*: Expression.PType;
    END;
    PFactor* = POINTER TO Factor;

    PTermItemOp = POINTER TO TermItemOp;
    TermItem* = RECORD
        factor-: PFactor;
        next: PTermItemOp;
    END;

    TermItemOp = RECORD (TermItem)
        PROCEDURE TermItemOp(op: STRING);

        op: STRING;
    END;

    TermList* = RECORD (TermItem)
        PROCEDURE makeFactor*(): PFactor;
        PROCEDURE addFactor*(f: PFactor);
        PROCEDURE addOp*(op: STRING);

        last: PTermItemOp;
    END;
    PTermList* = POINTER TO TermList;

    PSimpleItemOp = POINTER TO SimpleItemOp;
    SimpleItem* = RECORD
        term-: PTermList;
        next: PSimpleItemOp;
    END;

    SimpleItemOp = RECORD (SimpleItem)
        PROCEDURE SimpleItemOp(op: STRING);

        op: STRING;
    END;

    SimpleList* = RECORD (SimpleItem)
        PROCEDURE makeTerm*(): PTermList;
        PROCEDURE addTerm*(t: PTermList);
        PROCEDURE addOp*(op: STRING);

        unaryOp*: STRING;
        last: PSimpleItemOp;
    END;
    PSimpleList* = POINTER TO SimpleList;

    Node* = RECORD
    	PROCEDURE Node*(ops: POps);

    	PROCEDURE makeSimple*(): PSimpleList;
    	PROCEDURE addSimple*(s: PSimpleList);
        PROCEDURE addOp*(op: STRING);
    	PROCEDURE asExpression*(cx: ContextHierarchy.PNode): Expression.PType;

    	ops: POps;
        left-: PSimpleList;
        right-: POINTER TO RightNode;
    END;
    PNode* = POINTER TO Node;

    RightNode* = RECORD
        PROCEDURE RightNode(op: STRING);

        op-: STRING;
        simple: PSimpleList;
    END;

    OpTypeCheck = RECORD
        PROCEDURE expect(): STRING;
        PROCEDURE check(t: Types.PType): BOOLEAN;
    END;

    IntOpTypeCheck* = RECORD(OpTypeCheck)
    END;

    NumericOpTypeCheck = RECORD(OpTypeCheck)
    END;

    NumericOrSetOpTypeCheck = RECORD(NumericOpTypeCheck)
    END;

VAR
    intOpTypeCheck: IntOpTypeCheck;
    numericOpTypeCheck: NumericOpTypeCheck;
    numericOrSetOpTypeCheck: NumericOrSetOpTypeCheck;

PROCEDURE throwTypeNameExpected*();
BEGIN
    Errors.raise(Message.typeNameExpected);
END;

PROCEDURE castCode*(type: Types.PType; cx: Context.Type): STRING;
VAR
    result: STRING;
BEGIN
    IF type IS Record.PPointer THEN
        baseType <- Record.pointerBase(type^);
        result := Record.constructor(cx, baseType^);
    ELSE
        result := Record.constructor(cx, type(Record.PType)^);
    END;
    RETURN result;
END;

PROCEDURE unwrapTypeId*(id: Types.PId): TypeId.PType;
VAR
    result: TypeId.PType;
BEGIN
    IF ~(id IS TypeId.PType) THEN
        throwTypeNameExpected();
    ELSE
        result := id;
    END;
    RETURN result;
END;

PROCEDURE unwrapType*(id: Types.PId): Types.PStorageType;
    RETURN unwrapTypeId(id).type();
END;

PROCEDURE checkTypeCast*(fromInfo: Types.PVariable; fromType, toType: Types.PType; msg: STRING);
VAR
    PROCEDURE checkCommonBase(from, to: Record.PType; prefix: STRING);
    BEGIN
        t <- to.base;
        WHILE (t # NIL) & (t # from) DO
            t := t.base;
        END;
        IF t = NIL THEN
            Errors.raise(Format.format3(Message.isNotAnExtencion, prefix, to.description(), from.description()));
        END;
    END;

BEGIN
    prefix <- "invalid " + msg;

    pointerExpected <- fromType IS Record.PPointer;
    IF ~pointerExpected & ~(fromType IS Record.PType) THEN
        Errors.raise(Format.format2(Message.ptrToTypeExpected, prefix, fromType.description()));
    END;

    IF ~pointerExpected THEN
        IF (fromInfo # NIL) & ~fromInfo.isReference() THEN
            Errors.raise(Format.format1(Message.valueVarCantBeUsed, prefix));
        ELSIF ~(toType IS Record.PType) THEN
            Errors.raise(Format.format3(Message.recTypeExpectedAsArg, prefix, msg, toType.description()));
        END;
    ELSIF ~(toType IS Record.PPointer) THEN
        Errors.raise(Format.format3(Message.ptrTypeExpectedAsArg, prefix, msg, toType.description()));
    END;

    IF pointerExpected THEN
        checkCommonBase(Record.pointerBase(fromType(Record.PPointer)^), 
                        Record.pointerBase(toType(Record.PPointer)^), 
                        prefix);
    ELSE
        checkCommonBase(fromType(Record.PType), 
                        toType(Record.PType), 
                        prefix);
    END;
END checkTypeCast;

PROCEDURE typeTest*(left: Expression.PType; right: Types.PId; cx: ContextHierarchy.Node): Expression.PType;
VAR
    leftVar: Types.PVariable;
BEGIN
    info <- left.info();
    IF info IS Types.PVariable THEN
        leftVar := info;
    END;

    rightType <- unwrapType(right);
    checkTypeCast(leftVar, left.type(), rightType, "type test");
    RETURN Operator.is(left, Expression.makeSimple(castCode(rightType, cx), NIL));
END;

PROCEDURE throwTypeMismatch(from, to: Types.PType);
VAR
    fromDescription: STRING;
BEGIN
    IF from # NIL THEN
        fromDescription := "'" + from.description() + "'";
    ELSE
        fromDescription := "no type (proper procedure call)";
    END;
    Errors.raise(Format.format2(Message.typeMismatch, to.description(), fromDescription));
END;

PROCEDURE throwOperatorTypeMismatch(op, expect: STRING; type: Types.PType);
BEGIN
    Errors.raise(Format.format3(Message.opTypeMismatch, op, expect, type.description()));
END;

PROCEDURE checkTypeMatch(from, to: Types.PType);
BEGIN
    IF ~Cast.areTypesMatch(from, to) THEN
        throwTypeMismatch(from, to);
    END;
END;

PROCEDURE checkImplicitCast*(cx: ContextHierarchy.Root; from, to: Types.PType);
VAR
    op: LanguageContext.PCastOp;
BEGIN
    IF cx.language().types.implicitCast(from, to, FALSE, op) # Cast.errNo THEN
        throwTypeMismatch(from, to);
    END;
END;

PROCEDURE useIntOrderOp(t: Types.PType): BOOLEAN;
    RETURN Types.isInt(t) OR (t = Types.basic.ch);
END;

PROCEDURE useIntEqOp(t: Types.PType): BOOLEAN;
    RETURN Types.isInt(t)
        OR (t = Types.basic.bool)
        OR (t = Types.basic.ch)
        OR (t IS Record.PPointer)
        OR (t IS Types.PProcedure)
        OR (t = Types.nil);
END;

PROCEDURE assertOpType(type: Types.PType; check: OpTypeCheck; literal: STRING);
BEGIN
    IF ~check.check(type) THEN
        throwOperatorTypeMismatch(literal, check.expect(), type);
    END;
END;

PROCEDURE assertIntOp(type: Types.PType; literal: STRING; op: BinaryOperator): BinaryOperator;
BEGIN
    assertOpType(type, intOpTypeCheck, literal);
    RETURN op;
END;

PROCEDURE assertNumericOrSetOp(type: Types.PType; literal: STRING; op: BinaryOperator; intOp, setOp: BinaryOperator): BinaryOperator;
VAR
    result: BinaryOperator;
BEGIN
    assertOpType(type, numericOrSetOpTypeCheck, literal);
    IF Types.isInt(type) THEN
        result := intOp;
    ELSIF type = Types.basic.set THEN
        result := setOp;
    ELSE
        result := op;
    END;
    RETURN result;
END;

PROCEDURE notTypeId(e: Expression.PType);
BEGIN
    info <- e.info();
    IF info IS TypeId.PType THEN
        Errors.raise(Format.format1(Message.typeNameCantBeExpr, info.type().description()));
    END;
END;

PROCEDURE promoteTypeInExpression(e: Expression.PType; type: Types.PType): Expression.PType;
VAR
    v: CHAR;
    result: Expression.PType;
BEGIN
    fromType <- e.type();
    IF (type = Types.basic.ch) & (fromType IS Types.PString) & Types.stringAsChar(fromType^, v) THEN
        result := Expression.makeSimple(String.fromInt(ORD(v)), type);
    ELSE
        result := e;
    END;
    RETURN result;
END;

PROCEDURE relationOp(left, right: Expression.PType; literal: STRING; ops: Ops; VAR context: ContextHierarchy.Node): BinaryOperatorCx;
VAR
    type: Types.PType;
    o: BinaryOperatorCx;
    mismatch: STRING;
BEGIN
    notTypeId(left);
    IF literal # "IS" THEN
        notTypeId(right);

        IF literal # "IN" THEN
            type := ops.coalesceType(left.type(), right.type());
        END;
    END;

    IF literal = "=" THEN
        o := ops.eq(type);
        IF o = NIL THEN
            mismatch := ops.eqExpect();
        END;
    ELSIF literal = "#" THEN
        o := ops.notEq(type);
        IF o = NIL THEN
            mismatch := ops.eqExpect();
        END;
    ELSIF literal =  "<" THEN
        o := ops.less(type);
        IF o = NIL THEN
            mismatch := ops.strongRelExpect();
        END;
    ELSIF literal =  ">" THEN
        o := ops.greater(type);
        IF o = NIL THEN
            mismatch := ops.strongRelExpect();
        END;
    ELSIF literal = "<=" THEN
        o := ops.lessEq(type);
        IF o = NIL THEN
            mismatch := ops.relExpect();
        END;
    ELSIF literal = ">=" THEN
        o := ops.greaterEq(type);
        IF o = NIL THEN
            mismatch := ops.relExpect();
        END;
    ELSIF literal = "IS" THEN
        o := ops.is(context);
    ELSIF literal = "IN" THEN
        o := ops.in(left.type(), right.type(), context);
    END;

    IF LEN(mismatch) # 0 THEN
        throwOperatorTypeMismatch(literal, mismatch, type);
    END;
    RETURN o;
END;

PROCEDURE mulOp(s: STRING; type: Types.PType): BinaryOperator;
VAR
    o: BinaryOperator;
BEGIN
    IF s = "*" THEN
        o := assertNumericOrSetOp(type, s, Operator.mulReal, Operator.mulInt, Operator.setIntersection);
    ELSIF s = "/" THEN
        IF Types.isInt(type) THEN
            Errors.raise(Message.opDivExpected);
        END;
        o := assertNumericOrSetOp(type, s, Operator.divReal, NIL, Operator.setSymmetricDiff);
    ELSIF s = "DIV" THEN
        o := assertIntOp(type, s, Operator.divInt);
    ELSIF s = "MOD" THEN
        o := assertIntOp(type, s, Operator.mod);
    ELSIF s = "&" THEN
        IF type # Types.basic.bool THEN
            Errors.raise(Format.format1(Message.boolExpectedAsOperand, type.description()));
        END;
        o := Operator.and;
    ELSE
        ASSERT(FALSE);
    END;
    RETURN o;
END;

PROCEDURE makeFromFactor*(f: Factor): Expression.PType;
BEGIN
    result <- f.expression;
    IF f.not THEN
        notTypeId(result);
        checkTypeMatch(result.type(), Types.basic.bool);
        result := Operator.not(result);
    END;
    RETURN result;
END;

PROCEDURE makeFromTermList(list: TermList; root: ContextHierarchy.Root): Expression.PType;
BEGIN
	result <- makeFromFactor(list.factor^);
	next <- list.next;
	WHILE next # NIL DO
        notTypeId(result);
		e <- makeFromFactor(next.factor^);
        notTypeId(e);
        type <- result.type();
        o <- mulOp(next.op, type);
		checkImplicitCast(root, e.type(), type);
		result := o(result, e); 

        next := next.next;
	END;
	RETURN result;
END;

PROCEDURE makeFirstFromSimpleList(list: SimpleList; root: ContextHierarchy.Root): Expression.PType;
VAR
    o: PROCEDURE(e: Expression.PType): Expression.PType;
BEGIN
    result <- makeFromTermList(list.term^, root);
    IF list.unaryOp = "-" THEN
        type <- result.type();
        IF Types.isInt(type) THEN
            o := Operator.negateInt;
        ELSIF type = Types.basic.set THEN
            o := Operator.setComplement;
        ELSIF type = Types.basic.real THEN
            o := Operator.negateReal;
        ELSE
            throwOperatorTypeMismatch(list.unaryOp, numericOrSetOpTypeCheck.expect(), type);
        END;
    ELSIF list.unaryOp = "+" THEN
        assertOpType(result.type(), numericOpTypeCheck, list.unaryOp);
        o := Operator.unaryPlus;
    END;
    IF o # NIL THEN
        notTypeId(result);
        result := o(result);
    END;
    RETURN result;
END;

PROCEDURE matchAddOperator(ops: Ops; s: STRING; type: Types.PType): BinaryOperator;
VAR
    result: BinaryOperator;
BEGIN
    IF s = "+" THEN
        result := ops.plus(type);
    ELSIF s = "-" THEN
        result := assertNumericOrSetOp(type, s, Operator.subReal, Operator.subInt, Operator.setDiff);
    ELSIF s = "OR" THEN
        IF type # Types.basic.bool THEN
        	Errors.raise(Format.format1(Message.boolExpectedAsOperandOfOr, type.description()));
        END;
        result := Operator.or;
    END;
    RETURN result;
END;

PROCEDURE makeFromSimpleList(list: SimpleList; ops: Ops; cx: ContextHierarchy.Root): Expression.PType;
BEGIN
    result <- makeFirstFromSimpleList(list, cx);
    next <- list.next;
    WHILE next # NIL DO
        notTypeId(result);
        e <- makeFromTermList(next.term^, cx);
        notTypeId(e);
        o <- matchAddOperator(ops, next.op, result.type());
        checkImplicitCast(cx, e.type(), result.type());
        result := o(result, e);

        next := next.next;
    END;
    RETURN result;
END;

PROCEDURE makeFromNode(node: Node; ops: Ops; cx: ContextHierarchy.PNode): Expression.PType;
BEGIN
    root <- cx.root();
    result <- makeFromSimpleList(node.left^, ops, root^);
    right <- node.right;
    IF right # NIL THEN
        leftExpression <- result;
        rightExpression <- makeFromSimpleList(right.simple^, ops, root^);
        leftExpression := promoteTypeInExpression(leftExpression, rightExpression.type());
        rightExpression := promoteTypeInExpression(rightExpression, leftExpression.type());

        o <- relationOp(leftExpression, rightExpression, right.op, ops, cx^);
        result := o(leftExpression, rightExpression, ContextHierarchy.makeLanguageContext(cx));
    END;
    notTypeId(result);

    type <- result.type();
    IF type = NIL THEN
        Errors.raise(Message.procReturningNoResult);
    END;
    RETURN result;
END;

PROCEDURE Ops.is(VAR cx: ContextHierarchy.Node): BinaryOperatorCx;
VAR
    r: BinaryOperatorCx;

    PROCEDURE is(left, right: Expression.PType; unused: LanguageContext.PType): Expression.PType;
    VAR
        result: Expression.PType;
    BEGIN
        info <- right.info();
        IF info = NIL THEN
            throwTypeNameExpected();
        ELSE
            result := typeTest(left, info, cx);
        END;
        RETURN result;
    END;

BEGIN    
    JS.do("r = is"); (*allow closure*)
    RETURN r;
END;

PROCEDURE Ops.in(left, right: Types.PType; cx: ContextHierarchy.Node): BinaryOperatorCx;
BEGIN
    IF ~Types.isInt(left) THEN
        Errors.raise(Format.format2(Message.expectedAsElemOfSet, Types.intsDescription(), left.description()));
    END;
    checkImplicitCast(cx.root()^, right, Types.basic.set);

    RETURN Operator.setHasBit;
END;

PROCEDURE Ops.eqExpect(): STRING;
    RETURN "numeric type or SET or BOOLEAN or CHAR or character array or POINTER or PROCEDURE";
END;

PROCEDURE Ops.strongRelExpect(): STRING;
    RETURN "numeric type or CHAR or character array";
END;

PROCEDURE Ops.relExpect(): STRING;
    RETURN "numeric type or SET or CHAR or character array";
END;

PROCEDURE Ops.coalesceType(leftType, rightType: Types.PType): Types.PType;
VAR
    result: Types.PType;
BEGIN
    IF (leftType IS Record.PPointer) & (rightType IS Record.PPointer) THEN
        result := Cast.findPointerBaseType(leftType, rightType^);
        IF result = NIL THEN
            result := Cast.findPointerBaseType(rightType, leftType^);
        END;
    END;

    IF result = NIL THEN
        (*special case for strings*)
        isStrings <- Types.isString(leftType) & Types.isString(rightType);
        IF ~isStrings THEN
            checkTypeMatch(rightType, leftType);
        END;
        result := leftType;
    END;
    RETURN result;
END;

PROCEDURE Ops.eq(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntEqOp(type) THEN
        result := Operator.equalInt;
    ELSIF Types.isString(type) THEN
        result := Operator.equalStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.equalReal;
    ELSIF type = Types.basic.set THEN
        result := Operator.equalSet;
    END;
    RETURN result;
END;

PROCEDURE Ops.notEq(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntEqOp(type) THEN
        result := Operator.notEqualInt;
    ELSIF Types.isString(type) THEN
        result := Operator.notEqualStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.notEqualReal;
    ELSIF type = Types.basic.set THEN
        result := Operator.notEqualSet;
    END;
    RETURN result;
END;

PROCEDURE Ops.less(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntOrderOp(type) THEN
        result := Operator.lessInt;
    ELSIF Types.isString(type) THEN
        result := Operator.lessStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.lessReal;
    END;
    RETURN result;
END;

PROCEDURE Ops.greater(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntOrderOp(type) THEN
        result := Operator.greaterInt;
    ELSIF Types.isString(type) THEN
        result := Operator.greaterStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.greaterReal;
    END;
    RETURN result;
END;

PROCEDURE Ops.lessEq(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntOrderOp(type) THEN
        result := Operator.eqLessInt;
    ELSIF Types.isString(type) THEN
        result := Operator.eqLessStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.eqLessReal;
    ELSIF type = Types.basic.set THEN
        result := Operator.setInclL;
    END;
    RETURN result;
END;

PROCEDURE Ops.greaterEq(type: Types.PType): BinaryOperatorCx;
VAR
    result: BinaryOperatorCx;
BEGIN
    IF useIntOrderOp(type) THEN
        result := Operator.eqGreaterInt;
    ELSIF Types.isString(type) THEN
        result := Operator.eqGreaterStr;
    ELSIF type = Types.basic.real THEN
        result := Operator.eqGreaterReal;
    ELSIF type = Types.basic.set THEN
        result := Operator.setInclR;
    END;
    RETURN result;
END;

PROCEDURE Ops.plus(type: Types.PType): BinaryOperator;
VAR
    result: BinaryOperator;
BEGIN
    IF type = Types.basic.set THEN
        result := Operator.setUnion;
    ELSIF Types.isInt(type) THEN
        result := Operator.addInt;
    ELSIF type = Types.basic.real THEN
        result := Operator.addReal;
    ELSE
        throwOperatorTypeMismatch("+", SELF.plusExpect(), type);
    END;
    RETURN result;
END;

PROCEDURE Ops.plusExpect(): STRING;
    RETURN "numeric type or SET";
END;

PROCEDURE Factor.logicalNot();
BEGIN
    SELF.not := ~SELF.not;
END;

PROCEDURE TermItemOp.TermItemOp(op: STRING)
    | op(op);
END;

PROCEDURE SimpleItemOp.SimpleItemOp(op: STRING)
    | op(op);
END;

PROCEDURE RightNode.RightNode(op: STRING)
    | op(op);
END;

PROCEDURE TermList.makeFactor(): PFactor;
    RETURN NEW Factor();
END;

PROCEDURE TermList.addFactor(f: PFactor);
BEGIN
    IF SELF.factor = NIL THEN
        SELF.factor := f;
    ELSE
        SELF.last.factor := f;
    END;
END;

PROCEDURE TermList.addOp(op: STRING);
BEGIN
    next <- NEW TermItemOp(op);
    IF SELF.last = NIL THEN
        SELF.next := next;
    ELSE
        SELF.last.next := next;
    END;
    SELF.last := next;
END;

PROCEDURE SimpleList.makeTerm(): PTermList;
    RETURN NEW TermList();
END;

PROCEDURE SimpleList.addTerm(t: PTermList);
BEGIN
    IF SELF.term = NIL THEN
        SELF.term := t;
    ELSE
        SELF.last.term := t;
    END;
END;

PROCEDURE SimpleList.addOp(op: STRING);
BEGIN
    next <- NEW SimpleItemOp(op);
    IF SELF.last = NIL THEN
        SELF.next := next;
    ELSE
        SELF.last.next := next;
    END;
    SELF.last := next;
END;

PROCEDURE Node.Node(ops: POps)
	| ops(ops);
END;

PROCEDURE Node.makeSimple(): PSimpleList;
	RETURN NEW SimpleList();
END;

PROCEDURE Node.addSimple(s: PSimpleList);
BEGIN
    IF SELF.left = NIL THEN
        SELF.left := s;
    ELSE
        SELF.right.simple := s;
    END;
END;

PROCEDURE Node.addOp(op: STRING);
BEGIN
    SELF.right := NEW RightNode(op);
END;

PROCEDURE Node.asExpression(cx: ContextHierarchy.PNode): Expression.PType;
	RETURN makeFromNode(SELF, SELF.ops^, cx);
END;

PROCEDURE IntOpTypeCheck.expect(): STRING;
    RETURN Types.intsDescription();
END;

PROCEDURE IntOpTypeCheck.check(t: Types.PType): BOOLEAN;
    RETURN Types.isInt(t);
END;

PROCEDURE NumericOpTypeCheck.expect(): STRING;
    RETURN "numeric type";
END;

PROCEDURE NumericOpTypeCheck.check(t: Types.PType): BOOLEAN;
    RETURN Types.numeric.indexOf(t) # -1;
END;

PROCEDURE NumericOrSetOpTypeCheck.expect(): STRING;
    RETURN SUPER() + " or SET";
END;

PROCEDURE NumericOrSetOpTypeCheck.check(t: Types.PType): BOOLEAN;
    RETURN SUPER(t) OR (t = Types.basic.set);
END;

END ExpressionTree.
