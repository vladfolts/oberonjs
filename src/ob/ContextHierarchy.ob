MODULE ContextHierarchy;
IMPORT 
    CodeGenerator, Context, Designator, Errors, LanguageContext, Module, 
    OberonRtl, Object, Scope, ScopeBase, Symbols, String, Types, Format, LocMessage:=Message;
TYPE
    PRoot* = POINTER TO Root;
    PNode* = POINTER TO Node;

    Message* = RECORD
    END;

    QIdent* = RECORD
        PROCEDURE QIdent*(module: Module.PType; id: STRING; code: STRING);

        module-: Module.PType;
        id-: STRING;
        code-: STRING;
    END;

    Attributes* = RECORD
        designator*: Designator.PType;
    END;

    Node* = RECORD(Context.Type)
        PROCEDURE Node*(parent: PNode);

        PROCEDURE root*(): PRoot;
        PROCEDURE parent*(): PNode;
        PROCEDURE handleMessage*(VAR msg: Message): Object.PType;
        PROCEDURE codeGenerator*(): CodeGenerator.PIGenerator;
        PROCEDURE handleLiteral*(s: STRING);
        PROCEDURE handleIdent*(s: STRING);
        PROCEDURE genTypeName*(): STRING;
        PROCEDURE endParse*(): BOOLEAN;

        mParent: PNode;
    attributes*: POINTER TO Attributes;
    END;

    Root* = RECORD(Node)
        PROCEDURE Root(language: LanguageContext.PLanguage);

        PROCEDURE language*(): LanguageContext.PLanguage;

        PROCEDURE findSymbol*(ident: STRING): Symbols.PFoundSymbol;
        PROCEDURE findModule*(name: STRING): Types.PModule;

        PROCEDURE currentScope*(): Scope.PType;
        PROCEDURE pushScope*(scope: Scope.PType);
        PROCEDURE popScope*();

        mLanguage: LanguageContext.PLanguage;
        scopes: ARRAY * OF Scope.PType;
        gen: INTEGER;
    END;

PROCEDURE QIdent.QIdent(module: Module.PType; id: STRING; code: STRING)
    | module(module),
      id(id),
      code(code);
END;

PROCEDURE Node.Node(parent: PNode)
    | mParent(parent);
BEGIN
    IF parent # NIL THEN
        SELF.attributes := parent.attributes;
    ELSE
        NEW(SELF.attributes);
    END;
END;

PROCEDURE Node.root(): PRoot;
    RETURN SELF.mParent.root();
END;

PROCEDURE Node.parent(): PNode;
    RETURN SELF.mParent;
END;

PROCEDURE Node.handleMessage(VAR msg: Message): Object.PType;
    RETURN SELF.mParent.handleMessage(msg);
END;

PROCEDURE Node.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN SELF.mParent.codeGenerator();
END;

PROCEDURE Node.qualifyScope(scope: ScopeBase.PType): STRING;
    RETURN SELF.mParent.qualifyScope(scope);
END;

PROCEDURE Node.rtl(): OberonRtl.PType;
    RETURN SELF.root().language().rtl;
END;

PROCEDURE Node.handleLiteral(s: STRING);
END;

PROCEDURE Node.handleIdent(s: STRING);
END;

PROCEDURE Node.genTypeName(): STRING;
    RETURN SELF.mParent.genTypeName();
END;

PROCEDURE Root.Root(language: LanguageContext.PLanguage)
    | SUPER(NIL),
      mLanguage(language);
      END;

PROCEDURE Root.language(): LanguageContext.PLanguage;
    RETURN SELF.mLanguage;
END;

PROCEDURE Root.genTypeName(): STRING;
BEGIN
    INC(SELF.gen);
    RETURN "anonymous$" + String.fromInt(SELF.gen);
END;

PROCEDURE Root.findSymbol(ident: STRING): Symbols.PFoundSymbol;
VAR
    result: Symbols.PFoundSymbol;
BEGIN
    i <- LEN(SELF.scopes);
    WHILE (i # 0) & (result = NIL) DO
        DEC(i);
        scope <- SELF.scopes[i];
        result := scope.findSymbol(ident);
    END;
    RETURN result;
END;

PROCEDURE Root.findModule(name: STRING): Types.PModule;
VAR
    result: Types.PModule;
BEGIN
    IF name = "JS" THEN
        result := Module.makeJS();
    ELSIF SELF.mLanguage.moduleResolver # NIL THEN
        result := SELF.mLanguage.moduleResolver(name);
    END;
    RETURN result;
END;

PROCEDURE Root.currentScope(): Scope.PType;
    RETURN SELF.scopes[LEN(SELF.scopes) - 1];
END;

PROCEDURE Root.pushScope(scope: Scope.PType);
BEGIN
    SELF.scopes.add(scope);
END;

PROCEDURE Root.popScope();
BEGIN
    i <- LEN(SELF.scopes) - 1;
    SELF.scopes[i].close();
    SELF.scopes.remove(i);
END;

PROCEDURE Root.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN SELF.mLanguage.codeTraits.generator();
END;

PROCEDURE Root.root(): PRoot;
    RETURN SELF(POINTER);
END;

PROCEDURE getSymbolAndScope*(cx: Root; id: STRING): Symbols.PFoundSymbol;
BEGIN
    s <- cx.findSymbol(id);
    IF s = NIL THEN
        Errors.raise(Format.format1(LocMessage.undeclaredId, id));
    END;
    RETURN s;
END;

PROCEDURE getModuleSymbolAndScope*(m: Module.Type; id: STRING): Symbols.PFoundSymbol;
BEGIN
    s <- m.findSymbol(id);
    IF s = NIL THEN
        Errors.raise(Format.format2(LocMessage.idIsNotExported, id, m.name));
    END;
    RETURN s;
END;

PROCEDURE getQIdSymbolAndScope*(cx: Root; q: QIdent): Symbols.PFoundSymbol;
VAR 
    result: Symbols.PFoundSymbol;
BEGIN
    IF q.module # NIL THEN
        result := getModuleSymbolAndScope(q.module^, q.id);
    ELSE
        result := getSymbolAndScope(cx, q.id);
    END;
    RETURN result;
END;

PROCEDURE getSymbol*(cx: Root; id: STRING): Symbols.PSymbol;
    RETURN getSymbolAndScope(cx, id).symbol();
END;

PROCEDURE makeLanguageContext*(cx: PNode): LanguageContext.PType;
    RETURN NEW LanguageContext.Type(cx.root().language(), cx);
END;

END ContextHierarchy.
