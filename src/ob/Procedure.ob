MODULE Procedure;
IMPORT
    Cast,
    Code, 
    Context, 
    ConstValue,
    Designator,
    Errors, 
    Expression,
    LanguageContext,
    OberonRtl,
    Object, 
    Operator, 
    Precedence := CodePrecedence, 
    Record,
    String,
    Symbols, 
    TypeId,
    Types,
    Format,
    Message;
TYPE
    Call* = RECORD
        PROCEDURE make*(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType
    END;
    PCall = POINTER TO Call;

    StdCall* = RECORD(Call)
        args*: Types.ProcedureArguments
    END;
    PStdCall = POINTER TO StdCall;

    LenArgumentCheck = PROCEDURE(argType: Types.PType): BOOLEAN;
    CallLen* = RECORD(StdCall)
        check: LenArgumentCheck
    END;

    CallGenerator* = RECORD(Object.Type)
        PROCEDURE handleArgument*(e: Expression.PType);
        PROCEDURE end*(): Expression.PType;
    END;
    PCallGenerator* = POINTER TO CallGenerator;

    CallGeneratorImpl = RECORD(CallGenerator)
        args: ARRAY * OF Expression.PType;
        cx: LanguageContext.PType;
        call: PCall
    END;

    Type* = RECORD(Types.Procedure)
        PROCEDURE callGenerator*(cx: LanguageContext.PType): PCallGenerator;
    END;
    PType* = POINTER TO Type;

    Defined* = RECORD(Type)
        PROCEDURE define*(args: ARRAY OF Types.PProcedureArgument; result: Types.PType);

        mArgs: Types.ProcedureArguments;
        mResult: Types.PType;
    END;
    PDefined* = POINTER TO Defined;

    Std* = RECORD(Type)
        PROCEDURE Std*(name: STRING; call: PCall);

        call: PCall
    END;
    PStd = POINTER TO Std;

    Id* = RECORD(Types.ProcedureId)
        PROCEDURE Id*(type: Types.PProcedure; name: STRING; local: BOOLEAN);

        name: STRING;
        local: BOOLEAN;
    END;

    StdId = RECORD(Types.ProcedureId)
        PROCEDURE StdId(type: PStd; name: STRING);

        name: STRING;
    END;

    ArgumentsCode* = RECORD
        PROCEDURE write*(actual: Expression.PType; 
                         expected: Types.PProcedureArgument; 
                         cast: LanguageContext.PCastOp
                         );
        PROCEDURE result*(): STRING
    END;
    PArgumentsCode* = POINTER TO ArgumentsCode;

    GenArgCode = RECORD(ArgumentsCode)
        code: STRING;
        cx: LanguageContext.PType
    END;

    BinaryOpStr = PROCEDURE (x, y: STRING): STRING;
VAR
    predefined*: ARRAY * OF Symbols.PSymbol;

PROCEDURE checkArgument*(
    actual: Expression.PType; 
    expected: Types.PProcedureArgument; 
    pos: INTEGER;
    code: PArgumentsCode;
    types: LanguageContext.PTypes
    );
VAR
    result: LanguageContext.PCastOp;
    castErr: INTEGER;
BEGIN
    expectType <- expected.type; (* can be NIL for predefined functions (like NEW), dont check it in this case *)
    IF expectType # NIL THEN
        actualType <- actual.type();
        castErr := types.implicitCast(actualType, expectType, expected.isVar, result);
        IF castErr = Cast.errVarParameter THEN
            Errors.raise(Format.format3(Message.typeMismatchForArgPass, String.fromInt(pos + 1), actualType.description(), expectType.description()));
        ELSIF castErr # Cast.errNo THEN
            Errors.raise(Format.format3(Message.typeMismatchForArgConv, String.fromInt(pos + 1), actualType.description(), expectType.description()));
        END;
    END;
    IF expected.isVar THEN
        info <- actual.info();
        IF info = NIL THEN
            Errors.raise(Message.expCannotUsedAsVar);
        END;
        IF ~(info IS Types.PVariable) OR info.isReadOnly() THEN
            Errors.raise(Format.format1(Message.cannotBePassedAsVar, info.idType()));
        END;
    END;
    IF code # NIL THEN
        code.write(actual, expected, result);
    END;
END checkArgument;

PROCEDURE checkArgumentsType(
    actual: ARRAY OF Expression.PType;
    expected: ARRAY OF Types.PProcedureArgument; 
    code: PArgumentsCode;
    types: LanguageContext.PTypes
    );
BEGIN
    FOR i, a IN actual DO
        checkArgument(a, expected[i], i, code, types);
    END;
END;

PROCEDURE checkArgumentsCount*(actual, expected: INTEGER);
BEGIN
    IF actual # expected THEN
        Errors.raise(Format.format2(Message.argsExpected, String.fromInt(expected), String.fromInt(actual)));
    END;
END;

PROCEDURE processArguments*(
    actual: ARRAY OF Expression.PType;
    expected: ARRAY OF Types.PProcedureArgument; 
    code: PArgumentsCode;
    types: LanguageContext.PTypes
    );
BEGIN
    checkArgumentsCount(LEN(actual), LEN(expected));
    checkArgumentsType(actual, expected, code, types);
END;

PROCEDURE checkArguments(actual: ARRAY OF Expression.PType; expected: ARRAY OF Types.PProcedureArgument; types: LanguageContext.PTypes);
BEGIN
    processArguments(actual, expected, NIL, types);
END checkArguments;

PROCEDURE Defined.designatorCode(id: STRING): STRING;
    RETURN id;
END;

PROCEDURE Std.Std(name: STRING; call: PCall)
    | SUPER(name);
BEGIN
    SELF.call := call;
END;

PROCEDURE Std.args(): Types.ProcedureArguments;
VAR
    result: Types.ProcedureArguments;
BEGIN
    RETURN result;
END;

PROCEDURE Std.result(): Types.PType;
    RETURN NIL;
END;

PROCEDURE Id.Id(type: Types.PProcedure; name: STRING; local: BOOLEAN)
    | SUPER(type),
      name(name),
      local(local);
END;

PROCEDURE Id.canBeReferenced(): BOOLEAN;
    RETURN ~SELF.local;
END;

PROCEDURE Id.idType(): STRING;
    RETURN (SELF.local ? "local procedure" : SUPER()) + " '" + SELF.name + "'";
END;

PROCEDURE StdId.StdId(type: PStd; name: STRING)
    | SUPER(type),
      name(name);
END;

PROCEDURE StdId.idType(): STRING;
    RETURN "standard procedure " + SELF.name;
END;

PROCEDURE StdId.canBeReferenced(): BOOLEAN;
    RETURN FALSE;
END;

PROCEDURE CallGeneratorImpl.handleArgument(e: Expression.PType);
BEGIN
    SELF.args.add(e);
END;

PROCEDURE CallGeneratorImpl.end(): Expression.PType;
    RETURN SELF.call.make(SELF.args, SELF.cx)
END;

PROCEDURE makeCallGenerator*(call: PCall; cx: LanguageContext.PType): PCallGenerator;
BEGIN
    ASSERT(cx # NIL);
    result <- NEW CallGeneratorImpl();
    result.cx := cx;
    result.call := call;
    RETURN result
END;

PROCEDURE GenArgCode.write(actual: Expression.PType; expected: Types.PProcedureArgument; cast: LanguageContext.PCastOp);
VAR
    e: Expression.PType;
    coercedArg: Expression.PType;
BEGIN
    IF (expected # NIL) & expected.isVar THEN
        coercedArg := Expression.makeSimple(SELF.cx.language.codeTraits.referenceCode(actual.info()^), actual.type());
    ELSE
        coercedArg := Expression.deref(actual);
    END;
    IF LEN(SELF.code) # 0 THEN
        SELF.code := SELF.code + ", ";
    END;
    IF cast # NIL THEN
        e := cast.make(SELF.cx, coercedArg);
    ELSE
        e := coercedArg;
    END;
    SELF.code := SELF.code + e.code();
END GenArgCode.write;

PROCEDURE GenArgCode.result(): STRING;
    RETURN SELF.code
END GenArgCode.result;

PROCEDURE makeProcCallGeneratorWithCustomArgs*(
    cx: LanguageContext.PType; 
    type: Type;
    argumentsCode: PArgumentsCode
    ) : PCallGenerator;
TYPE
    CallImpl = RECORD(Call)
        args: Types.ProcedureArguments;
        result: Types.PType;
        argumentsCode: PArgumentsCode
    END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    BEGIN
        processArguments(args, SELF.args, SELF.argumentsCode, cx.language.types);
        RETURN Expression.makeSimple(
                "(" + SELF.argumentsCode.result() + ")",
                SELF.result
                )
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    call.args := type.args();
    call.result := type.result();
    call.argumentsCode := argumentsCode;
    RETURN makeCallGenerator(call, cx)
END makeProcCallGeneratorWithCustomArgs;

PROCEDURE makeArgumentsCode*(cx: LanguageContext.PType): PArgumentsCode;
BEGIN
    result <- NEW GenArgCode();
    result.cx := cx;
    RETURN result
END;

PROCEDURE makeProcCallGenerator*(
    cx: LanguageContext.PType; 
    type: Type
    ) : PCallGenerator;
    RETURN makeProcCallGeneratorWithCustomArgs(cx, type, makeArgumentsCode(cx))
END makeProcCallGenerator;

PROCEDURE Std.description(): STRING;
    RETURN "standard procedure " + SELF.name
END Std.description;

PROCEDURE Std.callGenerator(cx: LanguageContext.PType): PCallGenerator;
    RETURN makeCallGenerator(SELF.call, cx)
END Std.callGenerator;

PROCEDURE Std.designatorCode(id: STRING): STRING;
    RETURN ""
END Std.designatorCode;

PROCEDURE makeStdSymbol*(p: PStd): Symbols.PSymbol;
    RETURN NEW Symbols.Symbol(p.name, NEW StdId(p, p.name))
END;

PROCEDURE hasArgument(call: PStdCall; type: Types.PStorageType);
BEGIN
    call.args.add(NEW Types.ProcedureArgument(type, FALSE));
END hasArgument;

PROCEDURE hasVarArgument(call: PStdCall; type: Types.PStorageType);
BEGIN
    call.args.add(NEW Types.ProcedureArgument(type, TRUE));
END hasVarArgument;

PROCEDURE hasArgumentWithCustomType*(call: PStdCall);
BEGIN
    call.args.add(NEW Types.ProcedureArgument(NIL, FALSE));
END hasArgumentWithCustomType;

PROCEDURE hasVarArgumnetWithCustomType(call: PStdCall);
BEGIN
    call.args.add(NEW Types.ProcedureArgument(NIL, TRUE));
END hasVarArgumnetWithCustomType;

PROCEDURE checkSingleArgument*(
    actual: ARRAY OF Expression.PType; 
    call: StdCall; 
    types: LanguageContext.PTypes; 
    code: PArgumentsCode
    ): Expression.PType;
BEGIN
    ASSERT(LEN(call.args) = 1);
    processArguments(actual, call.args, code, types);
    ASSERT(LEN(actual) = 1);
    RETURN actual[0]
END checkSingleArgument;

PROCEDURE makeNew(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        result: Expression.PType;
    BEGIN
        arg <- checkSingleArgument(args, SELF, cx.language.types, NIL);
        argType <- arg.type();
        IF ~(argType IS Record.PPointer) THEN
            Errors.raise(Format.format1(Message.procVarExpected, argType.description()));
        ELSE
            baseType <- Record.pointerBase(argType^);
            IF baseType.finalizedAsNonExported THEN
                Errors.raise(Message.nonExpRecCantUsedInNew);
            END;
            right <- Expression.makeSimple(baseType.codeForNew(cx.cx^), argType);
            result := Expression.makeSimple(Operator.assign(arg.info(), right, cx), NIL);
        END;
        RETURN result;
    END;
BEGIN
    call <- NEW CallImpl();
    hasVarArgumnetWithCustomType(call);
    RETURN makeStdSymbol(NEW Std("NEW", call))
END makeNew;

PROCEDURE lenArgumentCheck*(argType: Types.PType): BOOLEAN;
    RETURN (argType IS Types.PArray) OR (argType IS Types.PString)
END lenArgumentCheck;

PROCEDURE CallLen.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
VAR
    arg: Expression.PType;
    argType: Types.PType;
BEGIN
    arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
    argType := arg.type();
    IF ~SELF.check(argType) THEN
        Errors.raise(Format.format1(Message.arrExpectedForLen, argType.description()));
    END;
    RETURN Expression.makeSimple(
        arg.code() + ".length",
        Types.basic.integer)
END CallLen.make;

PROCEDURE makeLen*(check: LenArgumentCheck): Symbols.PSymbol;
BEGIN
    call <- NEW CallLen();
    call.check := check;
    hasArgumentWithCustomType(call);
    RETURN makeStdSymbol(NEW Std("LEN", call))
END makeLen;

PROCEDURE makeOdd(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
        code: STRING;
        constValue: ConstValue.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        code := Code.adjustPrecedence(arg, Precedence.bitAnd);
        
        constValue := arg.constValue();
        IF constValue # NIL THEN
            constValue := NEW ConstValue.Int(
                ORD(ODD(constValue^(ConstValue.Int).value)));
        END;

        RETURN NEW Expression.Type(
            code + " & 1",
            Types.basic.bool,
            NIL,
            constValue,
            Precedence.bitAnd)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std("ODD", call))
END makeOdd;

PROCEDURE makeAssert(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        RETURN Expression.makeSimple(
                cx.language.rtl.assertId() + "(" + arg.code() + ")",
                NIL)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgument(call, Types.basic.bool);
    RETURN makeStdSymbol(NEW Std("ASSERT", call))
END makeAssert;

PROCEDURE setBitImpl(name: STRING; bitOp: BinaryOpStr): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            bitOp: BinaryOpStr
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        x, y: Expression.PType;
        yValue: INTEGER;
        value: ConstValue.PType;
        valueCodeExp: Expression.PType;
        valueCode: STRING;
        comment: STRING;
    BEGIN
        checkArguments(args, SELF.args, cx.language.types);
        ASSERT(LEN(args) = 2);
        x := args[0];
        y := args[1];
        value := y.constValue();
        IF value = NIL THEN
            valueCodeExp := Operator.lsl(
                Expression.make(
                    "1", 
                    Types.basic.integer,
                    NIL,
                    NEW ConstValue.Int(1)), 
                y);
            valueCode := valueCodeExp.code();
        ELSE
            yValue := value^(ConstValue.Int).value;
            IF (yValue < 0) OR (yValue > 31) THEN
                Errors.raise(Format.format2(Message.val31expected, SELF.name, String.fromInt(yValue)));
            END;
            comment := "bit: ";
            IF y.isTerm() THEN
                comment := comment + String.fromInt(yValue);
            ELSE
                comment := comment + Code.adjustPrecedence(y, Precedence.shift);
            END;
            yValue := LSL(1, yValue);
            valueCode := String.fromInt(yValue) + "/*" + comment + "*/";
        END;

        RETURN Expression.makeSimple(
            SELF.bitOp(Code.adjustPrecedence(x, Precedence.assignment), valueCode),
            NIL)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    call.name := name;
    call.bitOp := bitOp;
    hasVarArgument(call, Types.basic.set);
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std(call.name, call))
END setBitImpl;

PROCEDURE checkVariableArgumentsCount(min, max: INTEGER; actual: ARRAY OF Expression.PType);
BEGIN
    len <- LEN(actual);
    IF len < min THEN
        Errors.raise(Format.format2(Message.atLeastArgExpected, String.fromInt(min), String.fromInt(len)));
    ELSIF len > max THEN
        Errors.raise(Format.format2(Message.atMostArgExpected, String.fromInt(max), String.fromInt(len)));
    END;
END checkVariableArgumentsCount;

PROCEDURE incImpl(name: STRING; unary: STRING; incOp: BinaryOpStr; incRefOp: Operator.BinaryProc): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            unary: STRING;
            incOp: BinaryOpStr;
            incRefOp: Operator.BinaryProc;
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        x, y: Expression.PType;
        code: STRING;
        value: ConstValue.PType;
        valueCode: STRING;
    BEGIN
        checkVariableArgumentsCount(1, 2, args);
        checkArgumentsType(args, SELF.args, NIL, cx.language.types);
        x := args[0];
        IF Cast.passedByReference(x.info()^) THEN
            IF LEN(args) = 1 THEN
                y := Expression.makeSimple("1", NIL);
            ELSE
                y := args[1];
            END;
            addExp <- SELF.incRefOp(x, y);
            code := Cast.assign(cx, x.info()(Types.PVariable), addExp);
        ELSIF LEN(args) = 1 THEN
            code := SELF.unary + x.code();
        ELSE
            y := args[1];
            value := y.constValue();
            IF value = NIL THEN
                valueCode := y.code();
            ELSE
                valueCode := String.fromInt(value^(ConstValue.Int).value);
                IF ~y.isTerm() THEN
                    valueCode := valueCode + "/*" + y.code() + "*/";
                END;
            END;
            code := SELF.incOp(x.code(), valueCode);
        END;
        RETURN Expression.makeSimple(code, NIL)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    call.name := name;
    call.unary := unary;
    call.incOp := incOp;
    call.incRefOp := incRefOp;
    hasVarArgument(call, Types.basic.integer);
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std(call.name, call))
END incImpl;

PROCEDURE inclOp(x, y: STRING): STRING;
    RETURN x + " |= " + y
END inclOp;

PROCEDURE exclOp(x, y: STRING): STRING;
    RETURN x + " &= ~(" + y + ")"
END exclOp;

PROCEDURE incOp(x, y: STRING): STRING;
    RETURN x + " += " + y
END incOp;

PROCEDURE decOp(x, y: STRING): STRING;
    RETURN x + " -= " + y
END decOp;

PROCEDURE makeAbs(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
        argType: Types.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        argType := arg.type();
        IF Types.numeric.indexOf(argType) = -1 THEN
            Errors.raise(Format.format1(Message.typeMismatchNumExpected, argType.description()));
        END;
        RETURN Expression.makeSimple("Math.abs(" + arg.code() + ")", argType)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgumentWithCustomType(call);
    RETURN makeStdSymbol(NEW Std("ABS", call))
END makeAbs;

PROCEDURE makeFloor(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        code <- Code.adjustPrecedence(arg, Precedence.bitOr) + " | 0";
        RETURN NEW Expression.Type(
            code,
            Types.basic.integer,
            NIL,
            NIL,
            Precedence.bitOr
            )
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgument(call, Types.basic.real);
    RETURN makeStdSymbol(NEW Std("FLOOR", call))
END makeFloor;

PROCEDURE makeFlt(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
        value: ConstValue.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        value := arg.constValue();
        IF value # NIL THEN
            value := NEW ConstValue.Real(FLT(value^(ConstValue.Int).value));
        END;
        RETURN NEW Expression.Type(
                arg.code(), 
                Types.basic.real,
                NIL,
                value,
                arg.maxPrecedence())
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std("FLT", call))
END makeFlt;

PROCEDURE bitShiftImpl(name: STRING; op: Operator.BinaryProc): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
            name: STRING;
            op: Operator.BinaryProc
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    BEGIN
        checkArguments(args, SELF.args, cx.language.types);
        ASSERT(LEN(args) = 2);
        RETURN SELF.op(args[0], args[1])
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    call.name := name;
    call.op := op;
    hasArgument(call, Types.basic.integer);
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std(call.name, call))
END bitShiftImpl;

PROCEDURE makeOrd(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
        argType: Types.PType;
        value: ConstValue.PType;
        code: STRING;
        ch: CHAR;
        result: Expression.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        argType := arg.type();
        IF (argType = Types.basic.ch) OR (argType = Types.basic.set) THEN
            value := arg.constValue();
            IF (value # NIL) & (argType = Types.basic.set) THEN
                value := NEW ConstValue.Int(ORD(value^(ConstValue.Set).value));
            END;
            result := Expression.make(arg.code(), Types.basic.integer, NIL, value);
        ELSIF argType = Types.basic.bool THEN
            code := Code.adjustPrecedence(arg, Precedence.conditional) 
                  + " ? 1 : 0";
            result := NEW Expression.Type(
                code, 
                Types.basic.integer, 
                NIL, 
                arg.constValue(), 
                Precedence.conditional);
        ELSIF (argType IS Types.PString) 
            & (Types.stringAsChar(argType(Types.PString)^, ch)) THEN
            result := Expression.make(
                String.fromInt(ORD(ch)), 
                Types.basic.integer,
                NIL,
                NEW ConstValue.Int(ORD(ch)));
        ELSE
            Errors.raise(Format.format1(Message.ordExpectCharBoolSet, argType.description()));
        END;
        RETURN result
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgumentWithCustomType(call);
    RETURN makeStdSymbol(NEW Std("ORD", call))
END makeOrd;

PROCEDURE makeChr(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
    BEGIN
        arg := checkSingleArgument(args, SELF, cx.language.types, NIL);
        RETURN Expression.makeSimple(arg.code(), Types.basic.ch)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std("CHR", call))
END makeChr;

PROCEDURE makePack(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        x, y: Expression.PType;
    BEGIN
        checkArguments(args, SELF.args, cx.language.types);
        x := args[0];
        y := args[1];
        RETURN Expression.makeSimple(
            Operator.mulInplace(x, Operator.pow2(y), cx),
            NIL)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasVarArgument(call, Types.basic.real);
    hasArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std("PACK", call))
END makePack;

PROCEDURE makeUnpk(): Symbols.PSymbol;
    TYPE
        CallImpl = RECORD(StdCall)
        END;

    PROCEDURE CallImpl.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        x, y: Expression.PType;
    BEGIN
        checkArguments(args, SELF.args, cx.language.types);
        x := args[0];
        y := args[1];
        RETURN Expression.makeSimple(
                Operator.assign(y.info(), Operator.log2(x), cx) 
                + "; "
                + Operator.divInplace(x, Operator.pow2(y), cx),
            NIL)
    END CallImpl.make;
BEGIN
    call <- NEW CallImpl();
    hasVarArgument(call, Types.basic.real);
    hasVarArgument(call, Types.basic.integer);
    RETURN makeStdSymbol(NEW Std("UNPK", call))
END makeUnpk;

PROCEDURE dumpProcArgs(proc: Defined): STRING;
VAR
    result: STRING;
BEGIN
    IF LEN(proc.mArgs) = 0 THEN
        IF proc.mResult # NIL THEN
            result := "()";
        END;
    ELSE
        result := "(";
        FOR i, arg IN proc.mArgs DO
            IF i # 0 THEN
                result := result + ", ";
            END;
            ASSERT(arg.type # NIL);
            result := result + arg.type.description();
        END;
        result := result + ")";
    END;
    RETURN result
END;

PROCEDURE Defined.description(): STRING;
VAR
    result: STRING;
BEGIN
    result := SELF.name;
    IF LEN(result) = 0 THEN
        result := "PROCEDURE" + dumpProcArgs(SELF);
        IF SELF.mResult # NIL THEN
            result := result + ": " + SELF.mResult.description();
        END;
    END;
    RETURN result
END;

PROCEDURE Defined.callGenerator(cx: LanguageContext.PType): PCallGenerator;
    RETURN makeProcCallGenerator(cx, SELF)
END;

PROCEDURE Defined.define(args: ARRAY OF Types.PProcedureArgument; result: Types.PType);
BEGIN
    FOR a IN args DO
        ASSERT(a.type # NIL);
    END;
    SELF.mArgs := args;
    SELF.mResult := result;
END;

PROCEDURE Defined.args(): Types.ProcedureArguments;
    RETURN SELF.mArgs
END;

PROCEDURE Defined.result(): Types.PType;
    RETURN SELF.mResult
END;

BEGIN
    predefined.add(makeNew());
    predefined.add(makeOdd());
    predefined.add(makeAssert());
    predefined.add(setBitImpl("INCL", inclOp));
    predefined.add(setBitImpl("EXCL", exclOp));
    predefined.add(incImpl("INC", "++", incOp, Operator.addInt));
    predefined.add(incImpl("DEC", "--", decOp, Operator.subInt));
    predefined.add(makeAbs());
    predefined.add(makeFloor());
    predefined.add(makeFlt());
    predefined.add(bitShiftImpl("LSL", Operator.lsl));
    predefined.add(bitShiftImpl("ASR", Operator.asr));
    predefined.add(bitShiftImpl("ROR", Operator.ror));
    predefined.add(makeOrd());
    predefined.add(makeChr());
    predefined.add(makePack());
    predefined.add(makeUnpk());
END Procedure.
