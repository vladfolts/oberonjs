MODULE ContextModule;
IMPORT
    CodeGenerator, ContextHierarchy, ContextType, Errors, LanguageContext, 
    Object, Scope, ScopeBase, String, Symbols, Types, Format, Message;
TYPE
    Declaration* = RECORD(ContextHierarchy.Node)
        PROCEDURE findModule(name: STRING): Types.PModule;
        PROCEDURE handleImport(modules: ARRAY OF Symbols.PSymbol);

        name: STRING;
        imports: MAP OF Symbols.PSymbol;
        moduleScope: Scope.PModule;
        moduleGen: LanguageContext.PModuleGenerator;
        scopeInfo: ContextType.PScopeInfoGenerator;
    END;
    PDeclaration = POINTER TO Declaration;

    Import* = RECORD(ContextHierarchy.Node)
        currentModule, currentAlias: STRING;
        import: MAP OF STRING;
    END;

PROCEDURE Declaration.handleIdent(id: STRING);
BEGIN
    IF LEN(SELF.name) = 0 THEN
        SELF.name := id;
        root <- SELF.root();
        SELF.moduleScope := NEW Scope.Module(id, root.language().stdSymbols);
        root.pushScope(SELF.moduleScope);
    ELSIF id = SELF.name THEN
        scope <- SELF.moduleScope;
        scope.close();
        Scope.defineExports(scope^);
        SELF.codeGenerator().write(SELF.moduleGen.epilog(scope.exports));
    ELSE
        Errors.raise(Format.format2(Message.moduleName, SELF.name, id));
    END;
END;

PROCEDURE Declaration.findModule(name: STRING): Types.PModule;
BEGIN
    IF name = SELF.name THEN
        Errors.raise(Format.format1(Message.moduleCantImportItself, SELF.name));
    END;
    RETURN SELF.root().findModule(name);
END;

PROCEDURE Declaration.handleImport(modules: ARRAY OF Symbols.PSymbol);
VAR
    moduleAliases: MAP OF STRING;
BEGIN
    root <- SELF.root();
    scope <- root.currentScope();
    FOR s IN modules DO
        name <- s.info()(Types.PModule).name;
        SELF.imports[name] := s;
        scope.addSymbol(s, FALSE);
        moduleAliases[name] := s.id();
    END;
    SELF.moduleGen := root.language().moduleGenerator(
            SELF.name,
            moduleAliases);

    code <- SELF.codeGenerator();
    code.write(SELF.moduleGen.prolog());
    SELF.scopeInfo := NEW ContextType.ScopeInfoGenerator(SELF.name, code, NIL);
END;

PROCEDURE Declaration.qualifyScope(scope: ScopeBase.PType): STRING;
VAR
    result: STRING;
BEGIN
    IF (scope # SELF.moduleScope) & (scope IS Scope.PModule) THEN
        id <- scope.symbol.id();
        
        (* implicitly imported module, e.g.: record.pointerToRecordFromAnotherModule.field
           should not be used in code generation, 
           just return non-empty value to indicate this is not current module
        *)
        result := ~(id IN SELF.imports) ? "module '" + id + "' is not imported"
                                        : CodeGenerator.mangleId(SELF.imports[id].id()) + ".";
    END;
    RETURN result;
END;

PROCEDURE Declaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF ~ContextType.handleDescribeScopeMsg(msg, SELF.scopeInfo^) THEN
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE Import.handleIdent(id: STRING);
BEGIN
    SELF.currentModule := id;
END;

PROCEDURE handleImport(VAR import: Import);
BEGIN
    alias <- import.currentAlias;
    IF LEN(alias) = 0 THEN
        alias := import.currentModule;
    ELSE
        import.currentAlias := "";
    END;
    
    FOR a, m IN import.import DO
        IF a = alias THEN
            Errors.raise(Format.format1(Message.duplicateAlias, alias));
        ELSIF m = import.currentModule THEN
            Errors.raise(Format.format1(Message.moduleAlreadyImported, import.currentModule));
        END;
    END;
    import.import[alias] := import.currentModule;
END;

PROCEDURE Import.handleLiteral(s: STRING);
BEGIN
    IF s = ":=" THEN
        SELF.currentAlias := SELF.currentModule;
    ELSIF s = "," THEN
        handleImport(SELF);
    END;
END;

PROCEDURE Import.endParse(): BOOLEAN;
VAR
    modules: ARRAY * OF Symbols.PSymbol;
    unresolved: ARRAY * OF STRING;
BEGIN
    IF LEN(SELF.currentModule) # 0 THEN
        handleImport(SELF);
    END;

    parent <- SELF.parent()(PDeclaration);
    FOR alias, moduleName IN SELF.import DO
        module <- parent.findModule(moduleName);
        IF module = NIL THEN
            unresolved.add(moduleName);
        ELSE
            modules.add(NEW Symbols.Symbol(alias, module));
        END;
    END;
    IF LEN(unresolved) = 1 THEN
        Errors.raise(Format.format1(Message.moduleNotFound1, String.join(unresolved, ", ")));
    ELSIF LEN(unresolved) > 1 THEN
        Errors.raise(Format.format1(Message.moduleNotFound2, String.join(unresolved, ", ")));
    END;
    
    parent.handleImport(modules);
    RETURN TRUE;
END;

END ContextModule.
