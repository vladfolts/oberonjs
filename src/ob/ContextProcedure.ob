MODULE ContextProcedure;
IMPORT
    Cast, Chars, CodeGenerator, Context, ContextExpression, 
    ContextHierarchy, ContextType, 
    Errors, Expression, ExpressionTree, LanguageContext,
    Object, Procedure, Scope, Symbols, TypeId, Types, Variable, Format, Message;
TYPE
    Declaration* = RECORD(ContextType.DeclarationAndIdentHandle)
        PROCEDURE Declaration*(parent: ContextHierarchy.PNode);

        PROCEDURE doProlog*(): STRING;
        PROCEDURE doEpilog*(): STRING;
        PROCEDURE doBeginBody*();
        PROCEDURE doMakeArgumentVariable*(arg: Types.ProcedureArgument; name: STRING): Types.PVariable;
        PROCEDURE doMakeReturnCode*(e: Expression.PType; op: LanguageContext.CastOp): STRING;

        PROCEDURE handleReturn(e: Expression.PType);

        outerScope: Scope.PType;
        id-: Context.PIdentdefInfo;
        type: Procedure.PType;
        multipleArguments: BOOLEAN;
        returnParsed: BOOLEAN;
        scopeInfo: ContextType.PScopeInfoGenerator;
    END;
    PDeclaration = POINTER TO Declaration;

    FormalParameters* = RECORD(ContextHierarchy.Node)
        PROCEDURE FormalParameters*(parent: ContextType.PDeclarationAndIdentHandle);

        PROCEDURE handleQIdent(q: ContextHierarchy.QIdent);
        PROCEDURE doCheckResultType*(type: Types.PStorageType);

        arguments: ARRAY * OF Types.PProcedureArgument;
        type: Procedure.PDefined;
        result: Types.PStorageType;
    END;

    FormalParametersProcDecl* = RECORD(FormalParameters)
    END;

    DefinedParameters* = RECORD(ContextType.HandleSymbolAsType)
        isVar: BOOLEAN;
        argNamesForType: ARRAY * OF STRING;
    END;

    Return* = RECORD(ContextExpression.ExpressionHandler)
    END;

    AddArgumentMsg* = RECORD(ContextHierarchy.Message)
        PROCEDURE AddArgumentMsg(name: STRING; arg: Types.PProcedureArgument);

        name-: STRING;
        arg-: Types.PProcedureArgument;
    END;

    EndParametersMsg* = RECORD(ContextHierarchy.Message)
    END;

    AnyProcCall = RECORD(Procedure.Call)
    END;

PROCEDURE Declaration.Declaration(parent: ContextHierarchy.PNode)
    | SUPER(parent),
      outerScope(SELF.root().currentScope());
END;

PROCEDURE handleIdentdef*(VAR d: Declaration; id: Context.PIdentdefInfo);
BEGIN
    d.id := id;
    d.codeGenerator().write(d.doProlog());
    root <- d.root();
    root.pushScope(NEW Scope.Procedure(root.language().stdSymbols));
END;

PROCEDURE Declaration.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    handleIdentdef(SELF, id);
END;

PROCEDURE Declaration.handleIdent(id: STRING);
BEGIN
    expectId <- SELF.id.id();
    IF expectId # id THEN
        Errors.raise(Format.format2(Message.mismatchedProcName, expectId, id));
    END;
END;

PROCEDURE Declaration.doProlog(): STRING;
    RETURN Chars.ln + "function " + CodeGenerator.mangleId(SELF.id.id()) + "(";
END;

PROCEDURE Declaration.doEpilog(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.doBeginBody();
BEGIN
    code <- SELF.codeGenerator();
    code.openScope();
    SELF.scopeInfo := NEW ContextType.ScopeInfoGenerator(SELF.id.id(), code, SELF.parent());
END;

PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.setType(type: Types.PStorageType);
BEGIN
    t <- type(Procedure.PType);
    id <- SELF.id.id();
    procSymbol <- NEW Symbols.Symbol(
        id, NEW Procedure.Id(t, id, SELF.outerScope^ IS Scope.Procedure));
    SELF.outerScope.addSymbol(procSymbol, SELF.id.exported());
    SELF.type := t;
END;

PROCEDURE addArgument(VAR declaration: Declaration; name: STRING; arg: Types.ProcedureArgument);
BEGIN
    IF name = declaration.id.id() THEN
        Errors.raise(Format.format1(Message.argSameAsName, name));
    END;
    v <- declaration.doMakeArgumentVariable(arg, name);
    s <- NEW Symbols.Symbol(name, v);
    declaration.root().currentScope().addSymbol(s, FALSE);

    code <- declaration.codeGenerator();
    IF declaration.multipleArguments THEN
        code.write(", ");
    ELSE
        declaration.multipleArguments := TRUE;
    END;
    code.write(CodeGenerator.mangleId(name) + "/*" + arg.description() + "*/");
END;

PROCEDURE Declaration.doMakeArgumentVariable(arg: Types.ProcedureArgument; name: STRING): Types.PVariable;
    RETURN NEW Variable.ArgumentVariable(name, arg.type, arg.isVar);
END;

PROCEDURE Declaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS EndParametersMsg THEN
        SELF.codeGenerator().write(")");
        SELF.doBeginBody();
    ELSIF msg IS AddArgumentMsg THEN
        ASSERT(msg.arg # NIL);
        addArgument(SELF, msg.name, msg.arg^);
    ELSIF ContextType.handleDescribeScopeMsg(msg, SELF.scopeInfo^) THEN
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE Declaration.doMakeReturnCode(e: Expression.PType; op: LanguageContext.CastOp): STRING;
    RETURN op.clone(ContextHierarchy.makeLanguageContext(SELF(POINTER)), e);
END;

PROCEDURE Declaration.handleReturn(e: Expression.PType);
VAR
    op: LanguageContext.PCastOp;
BEGIN
    type <- e.type();
    result <- SELF.type.result();
    IF result = NIL THEN
        Errors.raise(Message.unexpectedReturn);
    END;
    
    language <- SELF.root().language();
    IF language.types.implicitCast(type, result, FALSE, op) # Cast.errNo THEN
        Errors.raise(Format.format2(Message.returnTypeMismatch, result.description(), type.description()));
    END;

    SELF.codeGenerator().write("return " + SELF.doMakeReturnCode(e, op^) + ";" + Chars.ln);

    SELF.returnParsed := TRUE;
END;

PROCEDURE Declaration.endParse(): BOOLEAN;
BEGIN
    SELF.codeGenerator().closeScope(SELF.doEpilog());
    SELF.root().popScope();

    result <- SELF.type.result();
    IF (result # NIL) & ~SELF.returnParsed THEN
        Errors.raise(Format.format1(Message.returnExpectedAtEnd, result.description()));
    END;
    RETURN TRUE;
END;

PROCEDURE FormalParameters.FormalParameters(parent: ContextType.PDeclarationAndIdentHandle)
    | SUPER(parent),
      type(NEW Procedure.Defined(parent.typeName()));
BEGIN
    parent.setType(SELF.type);
END;

PROCEDURE FormalParameters.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
VAR
    result: Object.PType;
BEGIN
    IF msg IS AddArgumentMsg THEN
        SELF.arguments.add(msg.arg);
    ELSE
        result := SUPER(msg);
    END;
    RETURN result;
END;

PROCEDURE FormalParameters.handleQIdent(q: ContextHierarchy.QIdent);
BEGIN
    s <- ContextHierarchy.getQIdSymbolAndScope(SELF.root()^, q);
    resultType <- ExpressionTree.unwrapType(s.symbol().info());
    SELF.doCheckResultType(resultType);
    SELF.result := resultType;
END;

PROCEDURE FormalParameters.doCheckResultType(type: Types.PStorageType);
BEGIN
    IF ~type.isScalar() THEN
        Errors.raise(Format.format1(Message.procedureCantReturn, type.description()));
    END;
END;

PROCEDURE FormalParameters.endParse(): BOOLEAN;
BEGIN
    SELF.type.define(SELF.arguments, SELF.result);
    RETURN TRUE;
END;

PROCEDURE FormalParametersProcDecl.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    result <- SUPER(msg);
    IF msg IS AddArgumentMsg THEN
        result := SELF.parent().handleMessage(msg);
    END;
    RETURN result;
END;

PROCEDURE FormalParametersProcDecl.endParse(): BOOLEAN;
BEGIN
    result <- SUPER();
    IF result THEN
        void <- SELF.handleMessage(NEW EndParametersMsg()^);
    END;
    RETURN result;
END;

PROCEDURE DefinedParameters.handleLiteral(s: STRING);
BEGIN
    IF s = "VAR" THEN
        SELF.isVar := TRUE;
    END;
END;

PROCEDURE DefinedParameters.handleIdent(id: STRING);
BEGIN
    SELF.argNamesForType.add(id);
END;

PROCEDURE DefinedParameters.setType(type: Types.PStorageType);
BEGIN
    FOR name IN SELF.argNamesForType DO
        void <- SELF.handleMessage(
            NEW AddArgumentMsg(name, NEW Types.ProcedureArgument(type, SELF.isVar))^);
    END;
    SELF.isVar := FALSE;
    SELF.argNamesForType.clear();
END;

PROCEDURE Return.handleExpression(e: Expression.PType);
BEGIN
    SELF.parent()^(Declaration).handleReturn(e);
END;

PROCEDURE Return.codeGenerator(): CodeGenerator.PIGenerator;
    RETURN CodeGenerator.nullGenerator;
END;

PROCEDURE AddArgumentMsg.AddArgumentMsg(name: STRING; arg: Types.PProcedureArgument)
    | name(name),
      arg(arg);
END;

PROCEDURE AnyProcCall.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
BEGIN
    argCode <- Procedure.makeArgumentsCode(cx);
    FOR a IN args DO
        argCode.write(a, NIL, NIL);
    END;
    RETURN Expression.makeSimple("(" + argCode.result() + ")", Types.any)
END;

PROCEDURE assertProcType(type: Types.PType; info: Types.PId): Procedure.PType;
VAR
    unexpected: STRING;
    result: Procedure.PType;
BEGIN
    IF type = NIL THEN
        unexpected := info.idType();
    ELSIF (info IS TypeId.PType) OR ~(type IS Procedure.PType) THEN
        unexpected := type.description();
    ELSE
        result := type;
    END;
    
    IF result = NIL THEN
        Errors.raise(Format.format1(Message.procedureExpected, unexpected));
    END;
    
    RETURN result;
END;

PROCEDURE makeCall*(cx: ContextHierarchy.PNode; type: Types.PType; info: Types.PId): Procedure.PCallGenerator;
BEGIN
    l <- ContextHierarchy.makeLanguageContext(cx)
    RETURN type = Types.any ? Procedure.makeCallGenerator(NEW AnyProcCall(), l)
                            : assertProcType(type, info).callGenerator(l);
END;

END ContextProcedure.
