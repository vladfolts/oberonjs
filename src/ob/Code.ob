MODULE Code;
IMPORT 
    CodeGenerator,
    ConstValue,
    Designator,
    Errors,
    Expression,
    Object, 
    Stream, 
    ScopeBase, 
    Symbols, 
    Precedence := CodePrecedence, 
    Record,
    String,
    TypeId, 
    Types,
    Format,
    Message;

TYPE
    StringsMap = MAP OF STRING;

    ModuleGenerator* = RECORD
        PROCEDURE ModuleGenerator*(name: STRING; imports: StringsMap);

        PROCEDURE prolog(): STRING;
        PROCEDURE epilog(exports: Symbols.Map): STRING;

        name: STRING;
        imports: StringsMap;
    END;

    PModuleGenerator* = POINTER TO ModuleGenerator;

PROCEDURE adjustPrecedence*(e: Expression.PType; precedence: INTEGER): STRING;
VAR
    result: STRING;
BEGIN
    result := e.code();
    IF (precedence # Precedence.none) & (e.maxPrecedence() > precedence) THEN
        result := "(" + result + ")";
    END;
    RETURN result
END adjustPrecedence;

PROCEDURE isPointerShouldBeExported(type: Record.Pointer): STRING;
VAR
    result: STRING;
BEGIN
    r <- Record.pointerBase(type);
    IF r.finalizedAsNonExported THEN
        result := r.cons;
    END;
    RETURN result
END;

PROCEDURE typeShouldBeExported(typeId: TypeId.PType; defaultId: STRING): STRING;
VAR
    result: STRING;
BEGIN
    type <- typeId.type();
    IF type IS Record.PType THEN
        result := defaultId;
    ELSIF type IS Record.PPointer THEN
        result := isPointerShouldBeExported(type^);
    END;
    RETURN result
END;

PROCEDURE genExport*(s: Symbols.Symbol): STRING;
BEGIN
    codeId <- CodeGenerator.mangleId(s.id());
    RETURN s.isVariable() ? "function(){return " + codeId + ";}"
        : ~s.isType()     ? codeId
                          : typeShouldBeExported(s.info()(TypeId.PType), codeId);
END;

PROCEDURE genCommaList(m: StringsMap; import: BOOLEAN): STRING;
VAR
    result: STRING;
BEGIN
    FOR name, alias IN m DO;
        IF LEN(result) # 0 THEN
            result := result + ", ";
        END;
        result := result + ((~import & (name = "JS")) 
                                ? "this"
                                : CodeGenerator.mangleId(import ? alias : name));
    END;
    RETURN result;
END;

PROCEDURE ModuleGenerator.prolog(): STRING;
    RETURN "var " + CodeGenerator.mangleId(SELF.name) + " = function (" + genCommaList(SELF.imports, TRUE) + "){" + Stream.kCR
END;

PROCEDURE exportId*(s: Symbols.Symbol): STRING;
VAR
    result: STRING;
BEGIN
    info <- s.info();
    IF info IS TypeId.PType THEN
        type <- info.type();
        IF type IS Record.PPointer THEN
            name <- Record.pointerBase(type^).cons;
            IF LEN(name) # 0 THEN
                result := name;
            END;
        END;
    END;
    IF LEN(result) = 0 THEN
        result := s.id();
    END;
    RETURN Record.mangleJSProperty(result);
END;

PROCEDURE ModuleGenerator.epilog(exports: Symbols.Map): STRING;
VAR
    result: STRING;
BEGIN
    FOR s IN exports DO
        code <- genExport(s^);
        IF LEN(code) # 0 THEN
            IF LEN(result) # 0 THEN
                result := result + "," + Stream.kCR;
            END;
            result := result + CodeGenerator.kTab + exportId(s^) + ": " + code;
        END;
    END;

    IF LEN(result) # 0 THEN
        result := "return {" + Stream.kCR + result + Stream.kCR + "}" + Stream.kCR;
    END;
    result := result + "}(" + genCommaList(SELF.imports, FALSE) + ");" + Stream.kCR;
    RETURN result
END;

PROCEDURE ModuleGenerator.ModuleGenerator(name: STRING; imports: StringsMap)
    | name(name),
      imports(imports);
END;

PROCEDURE checkIndex*(i: INTEGER);
BEGIN
    IF i < 0 THEN
        Errors.raise(Format.format1(Message.negativeIndex, String.fromInt(i)));
    END;
END checkIndex;

END Code.
