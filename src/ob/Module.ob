MODULE Module;
IMPORT 
    Context, Errors, Expression, LanguageContext, Procedure, Symbols, TypeId, Types, Variable,
    Format, Message;
CONST
    doProcId = "do";
    varTypeId = "var";
TYPE
    Type* = RECORD(Types.Module)
        PROCEDURE findSymbol*(id: STRING): Symbols.PFoundSymbol
    END;
    PType* = POINTER TO Type;

    JS = RECORD(Type)
    END;
VAR
    doProcSymbol, varTypeSymbol: Symbols.PSymbol;

PROCEDURE JS.findSymbol(id: STRING): Symbols.PFoundSymbol;
VAR
    result: Symbols.PSymbol;
BEGIN
    IF id = doProcId THEN
        result := doProcSymbol;
    ELSIF id = varTypeId THEN
        result := varTypeSymbol;
    ELSE
        result := NEW Symbols.Symbol(id, Types.anyVar);
    END;
    RETURN NEW Symbols.FoundSymbol(result, NIL)
END JS.findSymbol;

PROCEDURE makeDoProcSymbol(): Symbols.PSymbol;
TYPE
    Call = RECORD(Procedure.StdCall)
    END;
    Proc = RECORD(Procedure.Std)
    END;
VAR
    description: STRING;

    PROCEDURE Call.make(args: ARRAY OF Expression.PType; cx: LanguageContext.PType): Expression.PType;
    VAR
        arg: Expression.PType;
        type: Types.PType;
    BEGIN
        arg := Procedure.checkSingleArgument(args, SELF, cx.language.types, NIL);
        type := arg.type();
        IF ~(type IS Types.PString) THEN
            Errors.raise(Format.format2(Message.strExpected, description, type.description()));
        END;
        RETURN Expression.makeSimple(Types.stringValue(type(Types.PString)^), NIL)
    END Call.make;

    PROCEDURE Proc.description(): STRING;
        RETURN description
    END Proc.description;
BEGIN
    description := "JS predefined procedure 'do'";
    call <- NEW Call();
    Procedure.hasArgumentWithCustomType(call);

    RETURN Procedure.makeStdSymbol(NEW Procedure.Std("", call))
END makeDoProcSymbol;

PROCEDURE makeJS*(): PType;
    RETURN NEW JS("JS");
END;

PROCEDURE assertProcStatementResult*(type: Types.PType);
BEGIN
    IF (type # NIL) & ~(type^ IS Types.Any) THEN
        Errors.raise(Message.procRetResCantBeStatement);
    END;
END;

BEGIN
    doProcSymbol := makeDoProcSymbol();
    varTypeSymbol := NEW Symbols.Symbol(varTypeId, NEW TypeId.Type(Types.any));
END Module.
