MODULE ContextDesignator;
IMPORT
    Code, ConstValue, ContextExpression, ContextHierarchy, 
    Designator, Errors, Expression, ExpressionTree,
    Record, String, TypeId, Types, Variable, Format, Message;
TYPE
    Index* = RECORD
        PROCEDURE Index*(length: INTEGER; type: Types.PType; info: Types.PId; code, asProperty: STRING);

        length: INTEGER;
        type: Types.PType;
        info: Types.PId;
        code, asProperty: STRING;
    END;
    PIndex* = POINTER TO Index;

    QIdentHandler* = RECORD(ContextHierarchy.Node)
        PROCEDURE handleQIdent*(q: ContextHierarchy.QIdent);
    END;
    PQIdentHandler* = POINTER TO QIdentHandler;

    Type* = RECORD(ContextExpression.ExpressionHandler)
        PROCEDURE handleQIdent(q: ContextHierarchy.QIdent);
        PROCEDURE handleTypeCast(type: Types.PType);

        PROCEDURE doCheckIndexType*(type: Types.PType);
        PROCEDURE doCheckIndexValue(index: PIndex; const: ConstValue.PType);
        PROCEDURE doIndexSequence*(info: Types.PId; code, indexCode: STRING): PIndex;
        PROCEDURE doMakeDerefVar*(info: Types.PId): Types.PVariable;

        currentType-: Types.PType;
        info-: Types.PId;
        code, derefCode, propCode: STRING;
        indexExpression: Expression.PType;
    END;

    TypeCast* = RECORD(QIdentHandler)
        type: Types.PType;
    END;

    ActualParameters* = RECORD(ContextExpression.ExpressionHandler)
        PROCEDURE ActualParameters(parent: ContextExpression.PExpressionHandler);

        expressionHandler: ContextExpression.PExpressionHandler;
    END;

    BeginCallMsg* = RECORD(ContextHierarchy.Message)
    END;
    EndCallMsg* = RECORD(ContextHierarchy.Message)
    END;
VAR
    beginCallMsg: BeginCallMsg;
    endCallMsg: EndCallMsg;

PROCEDURE Index.Index(length: INTEGER; type: Types.PType; info: Types.PId; code, asProperty: STRING)
    | length(length),
      type(type),
      info(info),
      code(code),
      asProperty(asProperty);
END;

PROCEDURE Type.handleQIdent(q: ContextHierarchy.QIdent);
BEGIN
    found <- ContextHierarchy.getQIdSymbolAndScope(SELF.root()^, q);
    s <- found.symbol();
    info <- s.info();
    code <- q.code;

    IF info IS TypeId.PType THEN
        SELF.currentType := info.type();
    ELSIF info IS Types.PConst THEN
        SELF.currentType := info.type;
    ELSIF info IS Types.PVariable THEN
        SELF.currentType := info.type();
        IF (q.module # NIL) & (SELF.currentType # Types.any) THEN
            code := code + "()";
        END;
    ELSIF info IS Types.PProcedureId THEN
        procType <- info.type;
        code := procType.designatorCode(code);
        SELF.currentType := procType;
    END;

    SELF.info := info;
    SELF.code := code;
END;

PROCEDURE Type.handleExpression(e: Expression.PType);
BEGIN
    SELF.indexExpression := e;
END;

PROCEDURE Type.handleTypeCast(type: Types.PType);
BEGIN
    info <- SELF.info;
    IF info IS Types.PVariable THEN
        ExpressionTree.checkTypeCast(info, SELF.currentType, type, "type cast");
    ELSE
        Errors.raise(Format.format1(Message.canNotApplyTypecast, info.idType()));
    END;

    code <- SELF.root().language().rtl.typeGuard(SELF.code, ExpressionTree.castCode(type, SELF));
    SELF.code := code;

    SELF.currentType := type;
END;

PROCEDURE handleIndexExpression(designator: Type): PIndex;
BEGIN
    e <- designator.indexExpression;
    designator.doCheckIndexType(e.type());
    index <- designator.doIndexSequence(designator.info, designator.derefCode, Expression.deref(e).code());
    designator.doCheckIndexValue(index, e.constValue());  
    RETURN index;
END;

PROCEDURE handleDeref(VAR designator: Type);
BEGIN
    t <- designator.currentType;
    IF t IS Record.PPointer THEN
        base <- Record.pointerBase(t^);
        IF base.finalizedAsNonExported THEN
            Errors.raise(Message.pointerCantBeDereferenced);
        END;
        designator.currentType := base;

        info <- designator.info;
        IF (info IS Types.PVariable) & info.isReference() THEN
            designator.code := Expression.derefCode(designator.code);
        END;
    ELSE
        Errors.raise(Format.format1(Message.pointerTypeExpected, designator.currentType.description()));
    END;
END;

PROCEDURE getAt*(d: Type; type: Types.PStorageType): STRING;
    RETURN d.root().language().codeTraits.getAt(d.derefCode, Expression.deref(d.indexExpression).code(), type);
END;

PROCEDURE advance*(VAR d: Type; type: Types.PType; info: Types.PId; code: STRING; replace: BOOLEAN);
BEGIN
    d.currentType := type;
    d.info := info;
    IF replace THEN
        d.code := code;
    ELSE
        d.code := d.code + code;
    END;
END;

PROCEDURE Type.handleLiteral(s: STRING);
BEGIN
    IF (s = "]") OR (s = ",") THEN
        index <- handleIndexExpression(SELF);
        SELF.propCode := index.asProperty;
        advance(SELF, index.type, index.info, SELF.code + index.code, FALSE);
    END;
    IF (s = "[") OR (s = ",") THEN
        SELF.derefCode := SELF.code;
        SELF.code := "";
    ELSIF s = "^" THEN
        handleDeref(SELF);
        SELF.info := SELF.doMakeDerefVar(SELF.info);
    END;
END;

PROCEDURE Type.handleIdent(id: STRING);
BEGIN
    info <- SELF.info;
    isReadOnly <- (info IS Types.PVariable) & info.isReadOnly();

    t <- SELF.currentType;
    IF t IS Record.PPointer THEN
        handleDeref(SELF);
        isReadOnly := FALSE;
    END;

    IF info IS TypeId.PType THEN
        Types.raiseUnexpectedSelector(id, info.description());
    ELSIF ~(t IS Types.PStorageType) THEN
        Types.raiseUnexpectedSelector(id, t.description());
    ELSE
        field <- t.denote(id, isReadOnly);
        currentType <- field.type();
        fieldCode <- field.designatorCode(SELF.code, SELF);
        SELF.derefCode := fieldCode.derefCode;
        SELF.propCode := fieldCode.propCode;
        advance(SELF, currentType, field.asVar(SELF.code, isReadOnly, SELF), fieldCode.code, TRUE);
    END;
END;

PROCEDURE Type.doCheckIndexType(type: Types.PType);
BEGIN
    IF ~Types.isInt(type) THEN
        Errors.raise(Format.format2(Message.expressionExpected, Types.intsDescription(), type.description()));
    END;
END;

PROCEDURE Type.doCheckIndexValue(index: PIndex; pValue: ConstValue.PType);
BEGIN
    IF (pValue # NIL) & (pValue^ IS ConstValue.Int) THEN
        value <- pValue.value;
        Code.checkIndex(value);
        
        length <- index.length;
        IF (((SELF.currentType IS Types.PStaticArray) OR (SELF.currentType IS Types.PString))
          & (value >= length)) THEN
            Errors.raise(Format.format2(Message.indexOutOfBonds, String.fromInt(length - 1), String.fromInt(value)));
        END;
    END;
END;

PROCEDURE Type.doIndexSequence(info: Types.PId; code, indexCode: STRING): PIndex;
VAR
    length: INTEGER;
    indexType: Types.PStorageType;
BEGIN
    type <- SELF.currentType;
    IF type IS Types.PArray THEN
        indexType := type.elementsType;
    ELSIF type IS Types.PString THEN
        indexType := Types.basic.ch;
    ELSE
        Errors.raise(Format.format1(Message.arrayOrStringExpected, type.description()));
    END;

    IF type IS Types.PStaticArray THEN
        length := type.length();
    ELSIF type IS Types.PString THEN
        length := Types.stringLen(type^);
        IF length = 0 THEN
            Errors.raise(Message.cantIndexEmptString);
        END;
    END;

    leadCode <- code;
    wholeCode <- getAt(SELF, indexType);

    readOnly <- (info IS Types.PConst) 
             OR ((info IS Types.PVariable) & info.isReadOnly());
    v <- NEW Variable.PropertyVariable(indexType, leadCode, indexCode, readOnly);
    RETURN NEW Index(length, indexType, v, wholeCode, indexCode);
END;

PROCEDURE discardCode*(VAR d: Type);
BEGIN
    d.code := "";
END;

PROCEDURE Type.doMakeDerefVar(info: Types.PId): Types.PVariable;
   RETURN NEW Variable.DerefVariable(SELF.currentType(Types.PStorageType), SELF.code);
END;

PROCEDURE Type.endParse(): BOOLEAN;
BEGIN
    SELF.parent().attributes.designator :=
        NEW Designator.Type(SELF.code, SELF.currentType, SELF.info);
    RETURN TRUE;
END;

PROCEDURE TypeCast.handleQIdent(q: ContextHierarchy.QIdent);
BEGIN
    info <- ContextHierarchy.getQIdSymbolAndScope(SELF.root()^, q).symbol().info();
    IF info IS TypeId.PType THEN (* this is a type cast, not a procedure call *)
        SELF.type := info.type();
    END;
END;

PROCEDURE TypeCast.endParse(): BOOLEAN;
BEGIN
    result <- FALSE;
    IF SELF.type # NIL THEN
        SELF.parent()^(Type).handleTypeCast(SELF.type);
        result := TRUE;
    END;
    RETURN result;
END;

PROCEDURE ActualParameters.ActualParameters(parent: ContextExpression.PExpressionHandler)
    | SUPER(parent)
    , expressionHandler(parent);
BEGIN
    void <- SELF.handleMessage(beginCallMsg);
END;

PROCEDURE ActualParameters.handleExpression(e: Expression.PType);
BEGIN
    SELF.expressionHandler.handleExpression(e);
END;

PROCEDURE ActualParameters.endParse(): BOOLEAN;
BEGIN
    void <- SELF.handleMessage(endCallMsg);
    RETURN TRUE;
END;

END ContextDesignator.
