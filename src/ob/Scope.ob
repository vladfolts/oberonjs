MODULE Scope;
IMPORT 
    Errors, 
    M := Module,
    Object, 
    Procedures := Procedure, 
    Record,
    ScopeBase,
    String,
    Symbols, 
    TypeId,
    Types,
    Variable,
    Format,
    Message;
TYPE
    Unresolved = ARRAY * OF STRING;

    Finalizer = RECORD
        PROCEDURE Finalizer(proc: ScopeBase.FinalizerProc; closure: Object.PType);

        proc: ScopeBase.FinalizerProc;
        closure: Object.PType
    END;

    Type* = RECORD(ScopeBase.Type)
        PROCEDURE Type*(stdSymbols: Symbols.Map);

        PROCEDURE addSymbol*(s: Symbols.PSymbol; exported: BOOLEAN);
        PROCEDURE findSymbol*(id: STRING): Symbols.PFoundSymbol;
        PROCEDURE close*();
        PROCEDURE generateTempVar*(pattern: STRING): STRING;

        stdSymbols: Symbols.Map;
        symbols: Symbols.Map;
        unresolved: Unresolved;
        finalizers: ARRAY * OF POINTER TO Finalizer
    END;
    PType* = POINTER TO Type;

    Procedure* = RECORD(Type)
        tempVarCounter: INTEGER;
    END;

    CompiledModule = RECORD(M.Type)
        exports: Symbols.Map;
    END;
    PCompiledModule = POINTER TO CompiledModule;

    Module* = RECORD(Type)
        PROCEDURE Module*(name: STRING; stdSymbols: Symbols.Map);

        symbol-: Symbols.PSymbol;
        exports-: Symbols.Map;
        tempVarCounter: INTEGER;
    END;
    PModule* = POINTER TO Module;

PROCEDURE addSymbolForType*(t: Types.PBasicType; VAR result: Symbols.Map);
BEGIN
    result[t.name] := NEW Symbols.Symbol(t.name, NEW TypeId.Type(t));
END;

PROCEDURE makeStdSymbols*(): Symbols.Map;
VAR 
    result: Symbols.Map;

    PROCEDURE addSymbol(t: Types.PBasicType);
    BEGIN
        addSymbolForType(t, result);
    END;
BEGIN
    addSymbol(Types.basic.bool);
    addSymbol(Types.basic.ch);
    addSymbol(Types.basic.integer);
    addSymbol(Types.basic.uint8);
    addSymbol(Types.basic.real);
    addSymbol(Types.basic.set); 

    FOR proc IN Procedures.predefined DO
        result[proc.id()] := proc;
    END;
    RETURN result
END;

PROCEDURE Type.Type(stdSymbols: Symbols.Map)
    | stdSymbols(stdSymbols);
END;

PROCEDURE Module.Module(name: STRING; stdSymbols: Symbols.Map)
    | SUPER(stdSymbols),
      symbol(NEW Symbols.Symbol(name, NEW CompiledModule(name)));
BEGIN
    SELF.addSymbol(SELF.symbol, FALSE);
END;

PROCEDURE addUnresolved*(VAR s: Type; id: STRING);
BEGIN
    IF s.unresolved.indexOf(id) = -1 THEN
        s.unresolved.add(id);
    END;
END;

PROCEDURE resolve*(VAR s: Type; symbol: Symbols.PSymbol);
VAR
    id: STRING;
    i: INTEGER;
    info: Types.PId;
    type: Types.PType;
BEGIN
    id := symbol.id();
    i := s.unresolved.indexOf(id);
    IF i # -1 THEN
        info := symbol.info();
        type := info(TypeId.PType).type();
        IF (type # NIL) & ~(type IS Record.PType) THEN
            Errors.raise(Format.format1(Message.mustBeRecordType, id));
        END;
        s.unresolved.remove(i);
    END;
END;

PROCEDURE checkAllResolved*(s: Type);
BEGIN
    IF LEN(s.unresolved) # 0 THEN
        Errors.raise(Format.format1(Message.noDeclarationFound, String.join(s.unresolved, "', '")));
    END;
END;

PROCEDURE Type.close();
BEGIN
    FOR finalizer IN SELF.finalizers DO
        finalizer.proc(finalizer.closure);
    END;

    (* make second close() call safe and free memory *)
    SELF.finalizers.clear(); 
END;

PROCEDURE Finalizer.Finalizer(proc: ScopeBase.FinalizerProc; closure: Object.PType)
    | proc(proc),
      closure(closure);
END;

PROCEDURE Type.addFinalizer(proc: ScopeBase.FinalizerProc; closure: Object.PType);
BEGIN
    SELF.finalizers.add(NEW Finalizer(proc, closure));
END;

PROCEDURE close*(s: Type): Unresolved;
    RETURN s.unresolved
END;

PROCEDURE Type.addSymbol(s: Symbols.PSymbol; exported: BOOLEAN);
BEGIN
    id <- s.id();
    IF SELF.findSymbol(id) # NIL THEN
        Errors.raise(Format.format1(Message.alreadyDeclared, id));
    END;
    SELF.symbols[id] := s;
END;

PROCEDURE Type.findSymbol(id: STRING): Symbols.PFoundSymbol;
VAR
    result: Symbols.PSymbol;
    found: Symbols.PFoundSymbol;
BEGIN
    IF id IN SELF.symbols THEN
        result := SELF.symbols[id];
    ELSIF id IN SELF.stdSymbols THEN
        result := SELF.stdSymbols[id];
    END;
    IF result # NIL THEN
        found := NEW Symbols.FoundSymbol(result, SELF(POINTER))
    END;
    RETURN found
END;

PROCEDURE Procedure.name(): STRING;
    RETURN "procedure"
END;

PROCEDURE Procedure.addSymbol(s: Symbols.PSymbol; exported: BOOLEAN);
VAR
    info: Types.PId;
BEGIN
    IF exported THEN
        info := s.info();
        Errors.raise(Format.format2(Message.cannotExport, info.idType(), s.id()));
    END;
    SUPER(s, exported);
END;

PROCEDURE generateTempVar(pattern: STRING; VAR counter: INTEGER): STRING;
BEGIN
    INC(counter);
    RETURN "$" + pattern + String.fromInt(counter);
END;

PROCEDURE Procedure.generateTempVar(pattern: STRING): STRING;
    RETURN generateTempVar(pattern, SELF.tempVarCounter);
END;

PROCEDURE Module.generateTempVar(pattern: STRING): STRING;
    RETURN generateTempVar(pattern, SELF.tempVarCounter);
END;

PROCEDURE defineExports*(m: Module);
BEGIN
    cm <- m.symbol.info()(PCompiledModule);
    FOR id, k IN m.exports DO
        symbol <- k;
        info <- symbol.info();
        IF info IS Types.PVariable THEN
            symbol := NEW Symbols.Symbol(id, NEW Variable.ExportedVariable(id, info.type()));
        END;
        cm.exports[id] := symbol;
    END;
END;

PROCEDURE CompiledModule.findSymbol(id: STRING): Symbols.PFoundSymbol;
VAR
    result: Symbols.PFoundSymbol;
BEGIN
    IF id IN SELF.exports THEN
        result := NEW Symbols.FoundSymbol(SELF.exports[id], NIL);
    END;
    RETURN result
END;

PROCEDURE Module.name(): STRING;
    RETURN "module"
END;

PROCEDURE Module.addSymbol(s: Symbols.PSymbol; exported: BOOLEAN);
BEGIN
    SUPER(s, exported);
    IF exported THEN
        SELF.exports[s.id()] := s;
    END;
END;

PROCEDURE moduleSymbol*(m: Module): Symbols.PSymbol;
    RETURN m.symbol
END;

END Scope.
