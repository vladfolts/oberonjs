MODULE ContextVar;
IMPORT
    Chars, CodeGenerator, Context, ContextHierarchy, ContextType, Errors, 
    Object, Symbols, Types, Variable, Format, Message;
TYPE
    Declaration* = RECORD(ContextType.DeclarationAndIdentHandle)
        PROCEDURE doInitCode*(): STRING;

        idents: ARRAY * OF Context.PIdentdefInfo;
        type-: Types.PStorageType;
    END;

PROCEDURE Declaration.handleIdentdef(id: Context.PIdentdefInfo);
BEGIN
    SELF.idents.add(id);
END;

PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;

PROCEDURE Declaration.setType(type: Types.PStorageType);
BEGIN
    SELF.type := type;
END;

PROCEDURE Declaration.exportField(name: STRING);
BEGIN
    ContextType.checkIfFieldCanBeExported(name, SELF.idents, "variable");
END;

PROCEDURE Declaration.isAnonymousDeclaration(): BOOLEAN;
    RETURN TRUE;
END;
(*
PROCEDURE Declaration.typeName(): STRING;
    RETURN "";
END;
*)
PROCEDURE Declaration.handleMessage(VAR msg: ContextHierarchy.Message): Object.PType;
BEGIN
    IF msg IS ContextType.ForwardTypeMsg THEN
        Errors.raise(Format.format1(Message.typeWasntDeclared, msg.id));
    END;
    RETURN SUPER(msg);
END;

PROCEDURE Declaration.doInitCode(): STRING;
    RETURN SELF.type.initializer(SELF);
END;

PROCEDURE Declaration.endParse(): BOOLEAN;
BEGIN
    gen <- SELF.codeGenerator();
    FOR id IN SELF.idents DO
        varName <- id.id();

        scope <- SELF.root().currentScope();
        v <- NEW Variable.Declared(varName, SELF.type, scope);
        scope.addSymbol(NEW Symbols.Symbol(varName, v), id.exported());
        gen.write("var " + CodeGenerator.mangleId(varName) + " = " + SELF.doInitCode() + ";");
    END;

    gen.write(Chars.ln);
    RETURN TRUE;
END;

END ContextVar.
